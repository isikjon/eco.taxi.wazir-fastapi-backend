#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: +996XXXXXXXXX (—Å–ª–∏—Ç–Ω–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º +996)
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database.session import get_db
from app.models.driver import Driver
from sqlalchemy.orm import Session

def normalize_phone_number(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +996XXXXXXXXX"""
    if not phone:
        return phone
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    digits_only = ''.join(filter(str.isdigit, phone))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ 9 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞
    if len(digits_only) >= 9:
        if digits_only.startswith('996') and len(digits_only) >= 12:
            # –ù–æ–º–µ—Ä —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã 996
            main_digits = digits_only[3:12]  # –ë–µ—Ä–µ–º 9 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ 996
        else:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 9 —Ü–∏—Ñ—Ä
            main_digits = digits_only[-9:]
    else:
        return phone  # –ù–µ –º–æ–∂–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996XXXXXXXXX
    return f"+996{main_digits}"

def main():
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers = db.query(Driver).all()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –ë–î: {len(drivers)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        phone_changes = {}
        duplicate_count = {}
        
        for driver in drivers:
            old_phone = driver.phone_number
            new_phone = normalize_phone_number(old_phone)
            
            if old_phone != new_phone:
                print(f"üìû ID: {driver.id}, –ò–º—è: {driver.first_name} {driver.last_name}")
                print(f"   –°—Ç–∞—Ä—ã–π: '{old_phone}' -> –ù–æ–≤—ã–π: '{new_phone}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                if new_phone in duplicate_count:
                    duplicate_count[new_phone] += 1
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    unique_phone = f"{new_phone[:-1]}{duplicate_count[new_phone]}"
                    print(f"   ‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç! –ò–∑–º–µ–Ω—è–µ–º –Ω–∞: '{unique_phone}'")
                    phone_changes[driver.id] = unique_phone
                else:
                    duplicate_count[new_phone] = 1
                    phone_changes[driver.id] = new_phone
            else:
                print(f"‚úÖ ID: {driver.id}, –ù–æ–º–µ—Ä —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: '{old_phone}'")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        updated_count = 0
        for driver_id, new_phone in phone_changes.items():
            driver = db.query(Driver).filter(Driver.id == driver_id).first()
            if driver:
                driver.phone_number = new_phone
                updated_count += 1
        
        if updated_count > 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {updated_count}")
        else:
            print("\n‚úÖ –í—Å–µ –Ω–æ–º–µ—Ä–∞ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("\nüìã –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:")
        drivers = db.query(Driver).all()
        for driver in drivers:
            print(f"   ID: {driver.id}, Phone: '{driver.phone_number}', Name: {driver.first_name} {driver.last_name}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    main()
