#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database.session import get_db
from app.database.init_db import init_database
from app.models.driver import Driver
from app.models.transaction import DriverTransaction
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import random

def create_transactions_table():
    """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
    print("üîß –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)...")
    init_database()
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∞!")

def add_real_transactions():
    """–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    print("üí∞ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
    
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers = db.query(Driver).all()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(drivers)}")
        
        for driver in drivers:
            print(f"üí≥ –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ID: {driver.id} ({driver.first_name} {driver.last_name})")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            db.query(DriverTransaction).filter(DriverTransaction.driver_id == driver.id).delete()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å > 0)
            if driver.balance and driver.balance > 0:
                topup_transaction = DriverTransaction(
                    driver_id=driver.id,
                    type="topup",
                    amount=driver.balance + 75.0,  # –ë–∞–ª–∞–Ω—Å + –∫–æ–º–∏—Å—Å–∏—è
                    description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º",
                    status="completed",
                    reference=f"TOPUP-{driver.id}-{int(datetime.now().timestamp())}",
                    created_at=datetime.now() - timedelta(hours=2)
                )
                db.add(topup_transaction)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                commission_transaction = DriverTransaction(
                    driver_id=driver.id,
                    type="commission",
                    amount=-75.0,
                    description="–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ (5%)",
                    status="completed",
                    reference=f"COMM-{driver.id}-{int(datetime.now().timestamp())}",
                    created_at=datetime.now() - timedelta(hours=1)
                )
                db.add(commission_transaction)
                
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +{driver.balance + 75.0} —Å–æ–º")
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è: -75.0 —Å–æ–º")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
            for i in range(random.randint(1, 5)):
                order_amount = random.randint(100, 500)
                order_transaction = Transaction(
                    driver_id=driver.id,
                    type="order",
                    amount=order_amount,
                    description=f"–ü–æ–µ–∑–¥–∫–∞ #{random.randint(1000, 9999)}",
                    status="completed",
                    reference=f"ORDER-{driver.id}-{i+1}",
                    created_at=datetime.now() - timedelta(days=random.randint(1, 7))
                )
                db.add(order_transaction)
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑: +{order_amount} —Å–æ–º")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        print("‚úÖ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_transactions = db.query(Transaction).count()
        print(f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î: {total_transactions}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
        sample_transactions = db.query(Transaction).limit(10).all()
        for t in sample_transactions:
            print(f"   ID: {t.id}, –í–æ–¥–∏—Ç–µ–ª—å: {t.driver_id}, –¢–∏–ø: {t.type}, –°—É–º–º–∞: {t.amount}, –î–∞—Ç–∞: {t.created_at}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

def main():
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    create_transactions_table()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    add_real_transactions()
    
    print("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å API –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

if __name__ == "__main__":
    main()
