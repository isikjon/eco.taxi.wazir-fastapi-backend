from fastapi import APIRouter, HTTPException, Depends, UploadFile, File, Form, Query
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import datetime
import json
import os
import uuid
from pathlib import Path

from app.database.session import get_db
from app.models.driver import Driver
from app.models.photo_verification import PhotoVerification
from pydantic import BaseModel
from sqlalchemy import desc

router = APIRouter(prefix="/api/photo-control", tags=["photo-control"])

# Pydantic –º–æ–¥–µ–ª–∏
class PhotoSubmissionRequest(BaseModel):
    driver_phone: str
    photos: dict  # {"vu_front": "path", "vu_back": "path", "selfie": "path", etc.}

class PhotoVerificationResponse(BaseModel):
    id: int
    driver_phone: str
    driver_name: str
    submission_date: datetime
    status: str  # pending, approved, rejected
    photos: dict
    rejection_reason: Optional[str] = None

class ApprovalRequest(BaseModel):
    verification_id: int
    action: str  # approve, reject
    reason: Optional[str] = None

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
PHOTOS_DIR = Path("uploads/photos")
PHOTOS_DIR.mkdir(parents=True, exist_ok=True)

# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

@router.post("/submit", response_model=dict)
async def submit_photos_for_verification(
    driver_phone: str = Form(...),
    photos_json: Optional[str] = Form(None),
    selfie: Optional[UploadFile] = File(None),
    front: Optional[UploadFile] = File(None),
    back: Optional[UploadFile] = File(None),
    sts_front: Optional[UploadFile] = File(None),
    sts_back: Optional[UploadFile] = File(None),
    car_front: Optional[UploadFile] = File(None),
    car_left: Optional[UploadFile] = File(None),
    car_back: Optional[UploadFile] = File(None),
    car_right: Optional[UploadFile] = File(None),
    vin: Optional[UploadFile] = File(None),
    db: Session = Depends(get_db)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
        driver = db.query(Driver).filter(Driver.phone_number == driver_phone).first()
        if not driver:
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–≤–µ–± –∏–ª–∏ –º–æ–±–∏–ª—å–Ω—ã–π)
        photos_data = {}
        
        if photos_json:
            # –í–µ–±-–≤–µ—Ä—Å–∏—è: –ø–æ–ª—É—á–µ–Ω—ã blob-—Å—Å—ã–ª–∫–∏ –≤ JSON
            print("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±-–∑–∞–ø—Ä–æ—Å —Å JSON –¥–∞–Ω–Ω—ã–º–∏")
            try:
                photos_data = json.loads(photos_json)
                print(f"üì∏ –ü–æ–ª—É—á–µ–Ω—ã blob-—Å—Å—ã–ª–∫–∏: {list(photos_data.keys())}")
            except json.JSONDecodeError:
                raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        else:
            # –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ø–æ–ª—É—á–µ–Ω—ã —Ñ–∞–π–ª—ã
            print("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–∞–π–ª–∞–º–∏")
            uploaded_files = {
                'selfie': selfie,
                'front': front,
                'back': back,
                'sts_front': sts_front,
                'sts_back': sts_back,
                'car_front': car_front,
                'car_left': car_left,
                'car_back': car_back,
                'car_right': car_right,
                'vin': vin,
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—É—Ç–µ–π
            for photo_type, file in uploaded_files.items():
                if file and file.filename:
                    try:
                        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–∑–∞–º–µ–Ω—è–µ–º + –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–∏–º–≤–æ–ª)
                        safe_phone = driver_phone.replace('+', '')
                        file_extension = file.filename.split('.')[-1] if '.' in file.filename else 'jpg'
                        filename = f"{safe_phone}_{photo_type}_{uuid.uuid4().hex}.{file_extension}"
                        file_path = PHOTOS_DIR / filename
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        with open(file_path, "wb") as buffer:
                            content = await file.read()
                            buffer.write(content)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞
                        photos_data[photo_type] = f"/uploads/photos/{filename}"
                        print(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª {photo_type}: {file_path}")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {photo_type}: {e}")
                        continue
        
        if not photos_data:
            raise HTTPException(status_code=400, detail="–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –ë–î
        new_verification = PhotoVerification(
            driver_id=driver.id,
            taxipark_id=driver.taxipark_id,
            status="pending",
            photos=photos_data
        )
        
        db.add(new_verification)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
        driver.photo_verification_status = "pending"
        
        db.commit()
        db.refresh(new_verification)
        
        print(f"üì∏ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç {driver_phone}")
        print(f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {list(photos_data.keys())}")
        print(f"üì∏ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º: {photos_data}")
        
        return {
            "success": True,
            "message": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
            "verification_id": new_verification.id,
            "status": "pending"
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {str(e)}")

@router.get("/status", response_model=dict)
async def get_verification_status(
    driver_phone: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è
        driver = db.query(Driver).filter(Driver.phone_number == driver_phone).first()
        if not driver:
            return {
                "status": "not_started",
                "rejection_reason": None
            }
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –ë–î
        latest_verification = db.query(PhotoVerification).filter(
            PhotoVerification.driver_id == driver.id
        ).order_by(desc(PhotoVerification.created_at)).first()
        
        if not latest_verification:
            return {
                "status": driver.photo_verification_status,
                "rejection_reason": None
            }
        
        return {
            "status": latest_verification.status,
            "rejection_reason": latest_verification.rejection_reason,
            "submission_date": latest_verification.created_at.isoformat()
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@router.get("/pending", response_model=List[PhotoVerificationResponse])
async def get_pending_verifications(
    taxipark_id: Optional[int] = Query(None, description="ID —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞"),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î
        query = db.query(PhotoVerification).filter(PhotoVerification.status == "pending")
        
        if taxipark_id:
            query = query.filter(PhotoVerification.taxipark_id == taxipark_id)
        
        verifications = query.order_by(desc(PhotoVerification.created_at)).all()
        
        pending_verifications = []
        for verification in verifications:
            pending_verifications.append(PhotoVerificationResponse(
                id=verification.id,
                driver_phone=verification.driver.phone_number,
                driver_name=f"{verification.driver.first_name} {verification.driver.last_name}",
                submission_date=verification.created_at,
                status=verification.status,
                photos=verification.photos or {},
                rejection_reason=verification.rejection_reason
            ))
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending_verifications)} –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        
        return pending_verifications
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {str(e)}")

@router.post("/approve", response_model=dict)
async def approve_or_reject_verification(
    approval_data: ApprovalRequest,
    db: Session = Depends(get_db)
):
    """
    –û–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—å
    """
    try:
        verification_id = approval_data.verification_id
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –ë–î
        verification = db.query(PhotoVerification).filter(PhotoVerification.id == verification_id).first()
        
        if not verification:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if verification.status != "pending":
            raise HTTPException(status_code=400, detail="–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if approval_data.action == "approve":
            verification.status = "approved"
            verification.rejection_reason = None
            verification.processed_at = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è –≤ –ë–î
            driver = verification.driver
            if driver:
                driver.is_active = True
                driver.photo_verification_status = "approved"
            
            message = "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞"
            
        elif approval_data.action == "reject":
            verification.status = "rejected"
            verification.rejection_reason = approval_data.reason or "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞"
            verification.processed_at = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è –≤ –ë–î
            driver = verification.driver
            if driver:
                driver.is_active = False
                driver.photo_verification_status = "rejected"
            
            message = "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            
        else:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        
        db.commit()
        
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ #{verification_id} {approval_data.action}: {driver.first_name} {driver.last_name}")
        if approval_data.reason:
            print(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {approval_data.reason}")
        
        return {
            "success": True,
            "message": message,
            "verification_id": verification_id,
            "new_status": verification.status
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {str(e)}")

@router.get("/verification/{verification_id}")
async def get_verification_details(
    verification_id: int,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –ë–î
        verification = db.query(PhotoVerification).filter(PhotoVerification.id == verification_id).first()
        
        if not verification:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return {
            "id": verification.id,
            "driver_phone": verification.driver.phone_number,
            "driver_name": f"{verification.driver.first_name} {verification.driver.last_name}",
            "created_at": verification.created_at.isoformat(),
            "status": verification.status,
            "photos": verification.photos or {},
            "rejection_reason": verification.rejection_reason
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {str(e)}")

@router.get("/stats", response_model=dict)
async def get_photo_control_stats(
    taxipark_id: Optional[int] = Query(None, description="ID —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞"),
    db: Session = Depends(get_db)
):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—é
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        query = db.query(PhotoVerification)
        
        if taxipark_id:
            query = query.filter(PhotoVerification.taxipark_id == taxipark_id)
        
        total = query.count()
        pending = query.filter(PhotoVerification.status == "pending").count()
        approved = query.filter(PhotoVerification.status == "approved").count()
        rejected = query.filter(PhotoVerification.status == "rejected").count()
        
        return {
            "total": total,
            "pending": pending,
            "approved": approved,
            "rejected": rejected
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.post("/upload-single", response_model=dict)
async def upload_single_photo(
    driver_phone: str = Form(...),
    photo_type: str = Form(...),
    filename: str = Form(...),
    photo: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ (–¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
        driver = db.query(Driver).filter(Driver.phone_number == driver_phone).first()
        if not driver:
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = PHOTOS_DIR / filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, "wb") as buffer:
            content = await photo.read()
            buffer.write(content)
        
        print(f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {photo_type}: {file_path}")
        
        return {
            "success": True,
            "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
            "filename": filename,
            "photo_type": photo_type
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@router.delete("/clear-all", response_model=dict)
async def clear_all_verifications(db: Session = Depends(get_db)):
    """
    –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    """
    count = db.query(PhotoVerification).count()
    db.query(PhotoVerification).delete()
    db.commit()
    
    print(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {count} –∑–∞—è–≤–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—å")
    
    return {
        "success": True,
        "message": f"–û—á–∏—â–µ–Ω–æ {count} –∑–∞—è–≤–æ–∫",
        "cleared_count": count
    }
