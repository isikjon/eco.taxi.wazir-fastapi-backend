#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine, text

def fix_order_number():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    engine = create_engine(
        "sqlite:///./taxi_admin.db",
        connect_args={"check_same_thread": False}
    )
    
    with engine.connect() as conn:
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            conn.execute(text("""
                CREATE TABLE orders_new (
                    id INTEGER PRIMARY KEY,
                    order_number VARCHAR UNIQUE NOT NULL,
                    client_name VARCHAR,
                    client_phone VARCHAR,
                    pickup_address VARCHAR NOT NULL,
                    pickup_latitude FLOAT,
                    pickup_longitude FLOAT,
                    destination_address VARCHAR NOT NULL,
                    destination_latitude FLOAT,
                    destination_longitude FLOAT,
                    price FLOAT DEFAULT 0.0,
                    distance FLOAT,
                    duration INTEGER,
                    status VARCHAR DEFAULT 'received',
                    driver_id INTEGER,
                    taxipark_id INTEGER NOT NULL,
                    tariff VARCHAR,
                    payment_method VARCHAR,
                    notes TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    accepted_at DATETIME,
                    arrived_at_a DATETIME,
                    started_to_b DATETIME,
                    completed_at DATETIME,
                    cancelled_at DATETIME,
                    FOREIGN KEY (driver_id) REFERENCES drivers (id),
                    FOREIGN KEY (taxipark_id) REFERENCES taxiparks (id)
                )
            """))
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ orders_new")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
            conn.execute(text("""
                INSERT INTO orders_new (
                    id, client_name, client_phone, pickup_address, pickup_latitude, pickup_longitude,
                    destination_address, destination_latitude, destination_longitude, price, distance, duration,
                    status, driver_id, taxipark_id, tariff, payment_method, notes,
                    created_at, accepted_at, arrived_at_a, started_to_b, completed_at, cancelled_at
                )
                SELECT 
                    id, client_name, client_phone, pickup_address, pickup_latitude, pickup_longitude,
                    destination_address, destination_latitude, destination_longitude, price, distance, duration,
                    COALESCE(status, 'received'), driver_id, taxipark_id, tariff, payment_method, notes,
                    created_at, accepted_at, arrived_at_a, started_to_b, completed_at, cancelled_at
                FROM orders
            """))
            print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
            conn.execute(text("""
                UPDATE orders_new 
                SET order_number = 'WDD' || substr('0000000' || id, -7) 
                WHERE order_number IS NULL OR order_number = ''
            """))
            print("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
            conn.execute(text("DROP TABLE orders"))
            conn.execute(text("ALTER TABLE orders_new RENAME TO orders"))
            print("‚úÖ –ó–∞–º–µ–Ω–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ orders")
            
            conn.commit()
            print("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            conn.rollback()

if __name__ == "__main__":
    fix_order_number()
