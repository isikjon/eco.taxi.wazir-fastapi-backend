from fastapi import WebSocket, WebSocketDisconnect
from app.websocket.manager import websocket_manager
import json

async def driver_websocket_endpoint(websocket: WebSocket, driver_id: str):
    """WebSocket endpoint –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    try:
        await websocket_manager.connect(
            websocket=websocket,
            user_id=f"driver_{driver_id}",
            user_type="driver",
            taxipark_id=None  # –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è
        )
        
        print(f"‚úÖ [WebSocket] –í–æ–¥–∏—Ç–µ–ª—å {driver_id} –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        while True:
            try:
                # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                data = await websocket.receive_text()
                message = json.loads(data)
                
                print(f"üîç [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è {driver_id}: {message}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if message.get('type') == 'ping':
                    await websocket.send_text(json.dumps({
                        'type': 'pong',
                        'timestamp': message.get('timestamp')
                    }))
                elif message.get('type') == 'location_update':
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                    await websocket_manager.send_to_taxipark(
                        {
                            'type': 'driver_location_update',
                            'driver_id': driver_id,
                            'location': message.get('location'),
                            'timestamp': message.get('timestamp')
                        },
                        message.get('taxipark_id')
                    )
                
            except WebSocketDisconnect:
                break
            except Exception as e:
                print(f"‚ùå [WebSocket] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è {driver_id}: {e}")
                await websocket.send_text(json.dumps({
                    'type': 'error',
                    'message': str(e)
                }))
                
    except WebSocketDisconnect:
        print(f"üîç [WebSocket] –í–æ–¥–∏—Ç–µ–ª—å {driver_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    except Exception as e:
        print(f"‚ùå [WebSocket] –û—à–∏–±–∫–∞ WebSocket –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver_id}: {e}")
    finally:
        websocket_manager.disconnect(f"driver_{driver_id}")
        print(f"‚ùå [WebSocket] –í–æ–¥–∏—Ç–µ–ª—å {driver_id} –æ—Ç–∫–ª—é—á–µ–Ω")
