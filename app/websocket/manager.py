from fastapi import WebSocket
from typing import Dict, List
import json
import asyncio
from datetime import datetime

class WebSocketManager:
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        # –ö–ª—é—á: driver_id –∏–ª–∏ dispatcher_id, –ó–Ω–∞—á–µ–Ω–∏–µ: WebSocket
        self.active_connections: Dict[str, WebSocket] = {}
        # –ì—Ä—É–ø–ø—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞–º
        self.taxipark_connections: Dict[int, List[str]] = {}
    
    async def connect(self, websocket: WebSocket, user_id: str, user_type: str, taxipark_id: int = None):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ WebSocket"""
        await websocket.accept()
        self.active_connections[user_id] = websocket
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if taxipark_id:
            if taxipark_id not in self.taxipark_connections:
                self.taxipark_connections[taxipark_id] = []
            if user_id not in self.taxipark_connections[taxipark_id]:
                self.taxipark_connections[taxipark_id].append(user_id)
        
        print(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {user_type} {user_id} (—Ç–∞–∫—Å–æ–ø–∞—Ä–∫: {taxipark_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await self.send_personal_message({
            "type": "connection_established",
            "message": "WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "timestamp": datetime.now().isoformat()
        }, user_id)
    
    def disconnect(self, user_id: str):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç WebSocket"""
        if user_id in self.active_connections:
            del self.active_connections[user_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–æ–≤
        for taxipark_id, users in self.taxipark_connections.items():
            if user_id in users:
                users.remove(user_id)
        
        print(f"‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {user_id}")
    
    async def send_personal_message(self, message: dict, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        print(f"üîç [WebSocket Manager] send_personal_message called with user_id: {user_id}")
        print(f"üîç [WebSocket Manager] active_connections keys: {list(self.active_connections.keys())}")
        
        if user_id in self.active_connections:
            try:
                message_json = json.dumps(message)
                print(f"üîç [WebSocket Manager] Sending message to {user_id}: {message_json}")
                await self.active_connections[user_id].send_text(message_json)
                return True
            except Exception as e:
                print(f"‚ùå [WebSocket Manager] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                self.disconnect(user_id)
                return False
        else:
            print(f"‚ùå [WebSocket Manager] User {user_id} not found in active connections")
        return False
    
    async def send_to_taxipark(self, message: dict, taxipark_id: int, exclude_user: str = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞"""
        print(f"üîç [WebSocket Manager] send_to_taxipark called with taxipark_id: {taxipark_id} (type: {type(taxipark_id)})")
        print(f"üîç [WebSocket Manager] taxipark_connections keys: {list(self.taxipark_connections.keys())}")
        
        if taxipark_id is None or taxipark_id not in self.taxipark_connections:
            print(f"‚ùå [WebSocket Manager] Taxipark {taxipark_id} not found in connections")
            return
        
        sent_count = 0
        for user_id in self.taxipark_connections[taxipark_id]:
            if exclude_user and user_id == exclude_user:
                continue
            
            if await self.send_personal_message(message, user_id):
                sent_count += 1
        
        print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞ {taxipark_id}")
        return sent_count
    
    async def send_to_driver(self, message: dict, driver_id: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é"""
        return await self.send_personal_message(message, f"driver_{driver_id}")
    
    async def send_to_dispatcher(self, message: dict, dispatcher_id: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É"""
        return await self.send_personal_message(message, f"dispatcher_{dispatcher_id}")
    
    async def broadcast_new_order(self, order_data: dict, taxipark_id: int, target_driver_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è–º —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞"""
        message = {
            "type": "new_order",
            "data": order_data,
            "timestamp": datetime.now().isoformat()
        }
        
        if target_driver_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é
            await self.send_to_driver(message, str(target_driver_id))
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤–æ–¥–∏—Ç–µ–ª—è–º —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞
            await self.send_to_taxipark(message, taxipark_id)
    
    async def broadcast_order_status_update(self, order_data: dict, taxipark_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º"""
        message = {
            "type": "order_status_update",
            "data": order_data,
            "timestamp": datetime.now().isoformat()
        }
        
        await self.send_to_taxipark(message, taxipark_id)
    
    def get_connection_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return len(self.active_connections)
    
    def get_taxipark_connections_count(self, taxipark_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ"""
        if taxipark_id in self.taxipark_connections:
            return len(self.taxipark_connections[taxipark_id])
        return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket
websocket_manager = WebSocketManager()
