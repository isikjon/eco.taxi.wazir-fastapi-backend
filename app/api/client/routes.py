from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from app.database.session import get_db
from app.models.client import Client
from app.schemas.client import ClientCreate, ClientLogin
import sqlite3
import os
from datetime import datetime

client_router = APIRouter(prefix="/api/clients", tags=["client-api"])

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SMS
DB_PATH = "taxi_admin.db"

def get_db_connection():
    if not os.path.exists(DB_PATH):
        return None
    
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def normalize_phone_number(phone_number):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É +996XXXXXXXXXX –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î"""
    if not phone_number:
        return None
    
    print(f"üîß [NORMALIZE] Input phone: '{phone_number}'")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–º–µ—Ä–∞
    digits_only = ''.join(filter(str.isdigit, phone_number))
    print(f"üîß [NORMALIZE] Digits only: '{digits_only}' (length: {len(digits_only)})")
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 996, —É–±–∏—Ä–∞–µ–º –µ–≥–æ
    if digits_only.startswith('996'):
        main_digits = digits_only[3:]  # –ë–µ—Ä–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ 996
        print(f"üîß [NORMALIZE] Started with 996, main_digits: '{main_digits}'")
    else:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä 9 —Ü–∏—Ñ—Ä (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(digits_only) == 9:
            main_digits = digits_only
            print(f"üîß [NORMALIZE] 9 digits, using as is: '{main_digits}'")
        else:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 9 —Ü–∏—Ñ—Ä
            main_digits = digits_only[-9:] if len(digits_only) >= 9 else digits_only
            print(f"üîß [NORMALIZE] Taking last 9 digits: '{main_digits}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å 9 —Ü–∏—Ñ—Ä
    if len(main_digits) != 9:
        print(f"‚ùå [NORMALIZE] Invalid length: {len(main_digits)}, expected 9")
        return None
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ë–î: +996XXXXXXXXXX
    result = f"+996{main_digits}"
    print(f"‚úÖ [NORMALIZE] Result: '{result}'")
    return result

@client_router.post("/register")
async def register_client(client_data: ClientCreate, db: Session = Depends(get_db)):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        print(f"üîß [REGISTER] ========== CLIENT REGISTER –í–´–ó–í–ê–ù–ê ==========")
        print(f"üîß [REGISTER] Input data: {client_data}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        normalized_phone = normalize_phone_number(client_data.phone_number)
        print(f"üîß [REGISTER] Normalized phone: '{normalized_phone}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
        existing_client = db.query(Client).filter(Client.phone_number == normalized_phone).first()
        
        if existing_client:
            return {
                "success": False,
                "error": "–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        new_client = Client(
            first_name=client_data.first_name,
            last_name=client_data.last_name,
            phone_number=normalized_phone,
            email=client_data.email,
            preferred_payment_method=client_data.preferred_payment_method or "cash"
        )
        
        db.add(new_client)
        db.commit()
        db.refresh(new_client)
        
        return {
            "success": True,
            "data": {
                "client": new_client.to_dict(),
                "message": "–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            }
        }
        
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}"
        }

@client_router.post("/login")
async def login_client(login_data: ClientLogin, db: Session = Depends(get_db)):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        normalized_phone = normalize_phone_number(login_data.phone_number)
        
        # –û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú - –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–¥ 1111
        print(f"üîß [DEBUG] ========== CLIENT LOGIN –í–´–ó–í–ê–ù–ê ==========")
        print(f"üîß [DEBUG] Phone: {normalized_phone}, Code: {login_data.sms_code}")
        print(f"üîß [DEBUG MODE] –û—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ SMS –≤ –ë–î, –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–¥ 1111")
        
        if login_data.sms_code != "1111":
            return {
                "success": False,
                "error": "–í –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–¥ 1111"
            }
        
        # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞ –≤ SQLite –ë–î
        # if normalized_phone in ["+996111111111", "+9961111111111"]:
        #     if login_data.sms_code != "1111":
        #         return {
        #             "success": False,
        #             "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥"
        #         }
        # else:
        #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º SMS –∫–æ–¥ –≤ SQLite –ë–î
        #     conn = get_db_connection()
        #     if not conn:
        #         return {
        #             "success": False,
        #             "error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SMS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        #         }
        #     
        #     cursor = conn.cursor()
        #     cursor.execute('''
        #         SELECT * FROM sms_codes 
        #         WHERE phone_number = ? AND code = ? AND used = FALSE 
        #         AND datetime('now') < expires_at
        #         ORDER BY created_at DESC LIMIT 1
        #     ''', (normalized_phone, login_data.sms_code))
        #     
        #     sms_record = cursor.fetchone()
        #     if not sms_record:
        #         conn.close()
        #         return {
        #             "success": False,
        #             "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π SMS –∫–æ–¥"
        #         }
        #     
        #     # –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        #     cursor.execute('''
        #         UPDATE sms_codes SET used = TRUE WHERE id = ?
        #     ''', (sms_record['id'],))
        #     conn.commit()
        #     conn.close()
        
        print(f"‚úÖ [DEBUG MODE] SMS –∫–æ–¥ 1111 –ø—Ä–∏–Ω—è—Ç")
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        client = db.query(Client).filter(Client.phone_number == normalized_phone).first()
        
        if not client:
            return {
                "success": True,
                "isNewUser": True,
                "message": "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
        if not client.is_active:
            return {
                "success": False,
                "error": "blocked",
                "message": "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            }
        
        return {
            "success": True,
            "data": {
                "client": client.to_dict(),
                "isNewUser": False
            }
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
        }

@client_router.get("/status")
async def get_client_status(phone_number: str, db: Session = Depends(get_db)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        normalized_phone = normalize_phone_number(phone_number)
        client = db.query(Client).filter(Client.phone_number == normalized_phone).first()
        
        if not client:
            return {
                "success": False,
                "error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        return {
            "success": True,
            "data": {
                "client": client.to_dict()
            }
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        }

@client_router.put("/update")
async def update_client_profile(update_data: dict, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        first_name = update_data.get('first_name')
        last_name = update_data.get('last_name')
        
        if not first_name or not last_name:
            return {
                "success": False,
                "error": "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            }
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞)
        # –ü–æ–∫–∞ —á—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        client = db.query(Client).first()
        
        if not client:
            return {
                "success": False,
                "error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        client.first_name = first_name
        client.last_name = last_name
        client.updated_at = datetime.now()
        
        db.commit()
        db.refresh(client)
        
        return {
            "success": True,
            "data": {
                "client": client.to_dict(),
                "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
            }
        }
        
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}"
        }

@client_router.put("/update-payment-method")
async def update_client_payment_method(update_data: dict, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        client_id = update_data.get('client_id')
        payment_method = update_data.get('payment_method')
        
        if not client_id or not payment_method:
            return {
                "success": False,
                "error": "ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            }
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
        client = db.query(Client).filter(Client.id == client_id).first()
        
        if not client:
            return {
                "success": False,
                "error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        client.preferred_payment_method = payment_method
        client.updated_at = datetime.now()
        
        db.commit()
        db.refresh(client)
        
        return {
            "success": True,
            "data": {
                "client": client.to_dict(),
                "message": "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
            }
        }
        
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {str(e)}"
        }

@client_router.post("/create-order")
async def create_order_from_client(order_data: dict, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    try:
        from app.models.order import Order
        from app.models.taxipark import TaxiPark
        from app.services.dispatcher_service import DispatcherService
        from app.websocket.manager import websocket_manager
        from app.services.fcm_service import fcm_service
        import random
        
        print(f"üîç [CreateOrder] Received order data: {order_data}")
        
        client_phone = order_data.get('client_phone')
        if not client_phone:
            return {
                "success": False,
                "error": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            }
        
        normalized_phone = normalize_phone_number(client_phone)
        client = db.query(Client).filter(Client.phone_number == normalized_phone).first()
        
        if not client:
            return {
                "success": False,
                "error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        taxipark = db.query(TaxiPark).first()
        if not taxipark:
            return {
                "success": False,
                "error": "–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        pickup_latitude = order_data.get('pickup_latitude')
        pickup_longitude = order_data.get('pickup_longitude')
        
        if not pickup_latitude or not pickup_longitude:
            return {
                "success": False,
                "error": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –ê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            }
        
        nearest_driver = DispatcherService.get_nearest_available_driver(
            db, taxipark.id, pickup_latitude, pickup_longitude, radius_km=30.0
        )
        
        if not nearest_driver:
            return {
                "success": False,
                "error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π",
                "error_code": "NO_DRIVERS_AVAILABLE"
            }
        
        order_number = f"CL{random.randint(1000000, 9999999)}"
        
        new_order = Order(
            order_number=order_number,
            client_name=order_data.get('client_name', f"{client.first_name} {client.last_name}"),
            client_phone=normalized_phone,
            pickup_address=order_data.get('pickup_address', ''),
            pickup_latitude=pickup_latitude,
            pickup_longitude=pickup_longitude,
            destination_address=order_data.get('destination_address', ''),
            destination_latitude=order_data.get('destination_latitude'),
            destination_longitude=order_data.get('destination_longitude'),
            price=order_data.get('price', 0.0),
            distance=order_data.get('distance'),
            duration=order_data.get('duration'),
            status='received',
            driver_id=nearest_driver.id,
            taxipark_id=taxipark.id,
            tariff=order_data.get('tariff', '–≠–∫–æ–Ω–æ–º'),
            payment_method=order_data.get('payment_method', 'cash'),
            notes=order_data.get('notes', ''),
            created_at=datetime.now()
        )
        
        db.add(new_order)
        db.commit()
        db.refresh(new_order)
        
        print(f"‚úÖ [CreateOrder] Order created: {new_order.order_number}, assigned to driver {nearest_driver.id}")
        
        await websocket_manager.broadcast_new_order(
            new_order.to_dict(), 
            taxipark.id, 
            nearest_driver.id
        )
        
        if nearest_driver.fcm_token:
            fcm_service.send_notification(
                fcm_token=nearest_driver.fcm_token,
                title="–ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
                body=f"–ó–∞–∫–∞–∑ #{new_order.order_number} –∂–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è",
                data={
                    "type": "new_order",
                    "order_id": str(new_order.id),
                    "order_number": new_order.order_number
                }
            )
        
        return {
            "success": True,
            "message": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "data": {
                "order": new_order.to_dict(),
                "driver": nearest_driver.to_dict()
            }
        }
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå [CreateOrder] Error: {str(e)}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}"
        }

@client_router.get("/orders/{order_id}/status")
async def get_order_status(order_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    try:
        from app.models.order import Order
        
        order = db.query(Order).filter(Order.id == order_id).first()
        
        if not order:
            return {
                "success": False,
                "error": "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        return {
            "success": True,
            "data": {
                "order": order.to_dict()
            }
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {str(e)}"
        }