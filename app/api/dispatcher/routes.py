from fastapi import APIRouter, Request, HTTPException, status, Depends
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from app.database.session import get_db
from app.services.administrator_service import AdministratorService
from app.core.security import verify_token
from app.api.dispatcher.auth import router as dispatcher_auth_router

router = APIRouter(prefix="/disp", tags=["dispatch"])
templates = Jinja2Templates(directory="templates")

router.include_router(dispatcher_auth_router)

@router.get("/", response_class=HTMLResponse)
async def dispatch_dashboard(
    request: Request, 
    db: Session = Depends(get_db),
    page: int = 1,
    per_page: int = 20,
    status: str = None,
    date_from: str = None,
    date_to: str = None
):
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        return RedirectResponse(url='/disp/auth/login', status_code=302)
    
    from app.services.dispatcher_service import DispatcherService
    from app.models.order import Order
    from sqlalchemy.orm import joinedload
    from sqlalchemy import func
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = DispatcherService.get_dispatcher_stats(db, taxipark_id)
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–æ–¥–∏—Ç–µ–ª–µ–π
    query = db.query(Order).options(joinedload(Order.driver)).filter(Order.taxipark_id == taxipark_id)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if status and status != 'all':
        query = query.filter(Order.status == status)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    print(f"üîç DEBUG: date_from={date_from}, date_to={date_to}")
    
    if date_from:
        from datetime import datetime
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            date_from_obj = None
            for date_format in ['%Y-%m-%d', '%d.%m.%Y', '%d.%m.%y']:
                try:
                    date_from_obj = datetime.strptime(date_from, date_format)
                    print(f"üîç DEBUG: Parsed date_from={date_from_obj} using format {date_format}")
                    break
                except ValueError:
                    continue
            
            if date_from_obj:
                query = query.filter(Order.created_at >= date_from_obj)
                print(f"üîç DEBUG: Applied date_from filter: >= {date_from_obj}")
            else:
                print(f"üîç DEBUG: Failed to parse date_from: {date_from}")
        except Exception as e:
            print(f"üîç DEBUG: Error parsing date_from: {e}")
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    
    if date_to:
        from datetime import datetime, timedelta
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            date_to_obj = None
            for date_format in ['%Y-%m-%d', '%d.%m.%Y', '%d.%m.%y']:
                try:
                    date_to_obj = datetime.strptime(date_to, date_format)
                    print(f"üîç DEBUG: Parsed date_to={date_to_obj} using format {date_format}")
                    break
                except ValueError:
                    continue
            
            if date_to_obj:
                # –î–ª—è date_to –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–µ—Ü –¥–Ω—è (23:59:59)
                date_to_obj = date_to_obj.replace(hour=23, minute=59, second=59, microsecond=999999)
                query = query.filter(Order.created_at <= date_to_obj)
                print(f"üîç DEBUG: Applied date_to filter: <= {date_to_obj}")
            else:
                print(f"üîç DEBUG: Failed to parse date_to: {date_to}")
        except Exception as e:
            print(f"üîç DEBUG: Error parsing date_to: {e}")
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    total_orders = query.count()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    total_pages = (total_orders + per_page - 1) // per_page if total_orders > 0 else 1
    offset = (page - 1) * per_page
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    orders = query.order_by(Order.created_at.desc()).offset(offset).limit(per_page).all()
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö
    print(f"üîç DEBUG: Found {len(orders)} orders")
    for order in orders:
        print(f"üîç DEBUG: Order {order.id} - created_at: {order.created_at}, status: {order.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ —Ñ–∏–ª—å—Ç—Ä–∞–º
        if date_from:
            from datetime import datetime
            try:
                date_from_obj = None
                for date_format in ['%Y-%m-%d', '%d.%m.%Y', '%d.%m.%y']:
                    try:
                        date_from_obj = datetime.strptime(date_from, date_format)
                        break
                    except ValueError:
                        continue
                
                if date_from_obj and order.created_at:
                    if order.created_at >= date_from_obj:
                        print(f"üîç DEBUG: Order {order.id} PASSES date_from filter")
                    else:
                        print(f"üîç DEBUG: Order {order.id} FAILS date_from filter")
            except Exception as e:
                print(f"üîç DEBUG: Error checking date_from for order {order.id}: {e}")
        
        if date_to:
            from datetime import datetime
            try:
                date_to_obj = None
                for date_format in ['%Y-%m-%d', '%d.%m.%Y', '%d.%m.%y']:
                    try:
                        date_to_obj = datetime.strptime(date_to, date_format)
                        break
                    except ValueError:
                        continue
                
                if date_to_obj and order.created_at:
                    date_to_obj = date_to_obj.replace(hour=23, minute=59, second=59, microsecond=999999)
                    if order.created_at <= date_to_obj:
                        print(f"üîç DEBUG: Order {order.id} PASSES date_to filter")
                    else:
                        print(f"üîç DEBUG: Order {order.id} FAILS date_to filter")
            except Exception as e:
                print(f"üîç DEBUG: Error checking date_to for order {order.id}: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    statuses = db.query(Order.status, func.count(Order.id)).filter(
        Order.taxipark_id == taxipark_id
    ).group_by(Order.status).all()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º
    has_date_filters = bool(date_from or date_to)
    
    return templates.TemplateResponse("dispatcher/index.html", {
        "request": request,
        "dispatcher": dispatcher,
        "taxipark_id": taxipark_id,
        "balance": stats["balance"],
        "drivers_count": stats["drivers_count"],
        "orders_stats": stats["orders_stats"],
        "orders": orders,
        "current_page": page,
        "total_pages": total_pages,
        "total_orders": total_orders,
        "per_page": per_page,
        "current_status": status,
        "statuses": statuses,
        "date_from": date_from,
        "date_to": date_to,
        "has_date_filters": has_date_filters
    })

@router.get("/analytics", response_class=HTMLResponse)
async def dispatch_analytics(request: Request, db: Session = Depends(get_db)):
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        return RedirectResponse(url='/disp/auth/login', status_code=302)
    
    from app.services.dispatcher_service import DispatcherService
    from app.models.order import Order
    from app.models.driver import Driver
    from app.models.transaction import DriverTransaction
    from sqlalchemy import func
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = DispatcherService.get_dispatcher_stats(db, taxipark_id)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    orders_by_status = db.query(Order.status, func.count(Order.id)).filter(
        Order.taxipark_id == taxipark_id
    ).group_by(Order.status).all()
    orders_by_status_dict = dict(orders_by_status)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
    tariffs_data = db.query(Order.tariff, func.count(Order.id)).filter(
        Order.taxipark_id == taxipark_id,
        Order.tariff.isnot(None)
    ).group_by(Order.tariff).all()
    tariffs_dict = dict(tariffs_data)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    active_drivers = db.query(Driver).filter(
        Driver.taxipark_id == taxipark_id,
        Driver.is_active == True
    ).count()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    total_topups = DispatcherService.get_total_topups_count(db, taxipark_id)
    
    return templates.TemplateResponse("dispatcher/analytics.html", {
        "request": request,
        "dispatcher": dispatcher,
        "taxipark_id": taxipark_id,
        "balance": stats["balance"],
        "drivers_count": stats["drivers_count"],
        "total_orders": sum(orders_by_status_dict.values()) if orders_by_status_dict else 0,
        "orders_by_status": orders_by_status_dict,
        "tariffs_data": tariffs_dict,
        "active_drivers": active_drivers,
        "total_topups": total_topups
    })

@router.get("/drivers", response_class=HTMLResponse)
async def dispatch_drivers(
    request: Request, 
    db: Session = Depends(get_db), 
    page: int = 1, 
    per_page: int = 10,
    status: str = "all",
    tariff: str = "",
    search: str = ""
):
    try:
        dispatcher = getattr(request.state, 'dispatcher', None)
        taxipark_id = getattr(request.state, 'taxipark_id', None)
        
        if not dispatcher:
            return RedirectResponse(url='/disp/auth/login', status_code=302)
        
        from app.models.driver import Driver
        from app.services.dispatcher_service import DispatcherService
        from sqlalchemy import func, or_
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞
        query = db.query(Driver).filter(Driver.taxipark_id == taxipark_id)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if status == "active":
            query = query.filter(Driver.is_active == True)
        elif status == "inactive":
            query = query.filter(Driver.is_active == False)
        
        if tariff:
            query = query.filter(Driver.tariff == tariff)
        
        # –ê–•–£–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê –°–¢–†–û–ì–û –ù–ê –ö–ò–†–ò–õ–õ–ò–¶–ï
        if search:
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            def normalize_cyrillic_search(search_text):
                """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                normalized = search_text.strip().lower()
                
                # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                replacements = {
                    '—ë': '–µ', '–π': '–∏', '—ä': '', '—å': '', 
                    ' ': ' ', '\t': ' ', '\n': ' ', '\r': ' '
                }
                
                for old, new in replacements.items():
                    normalized = normalized.replace(old, new)
                
                # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                import re
                normalized = re.sub(r'\s+', ' ', normalized).strip()
                
                return normalized
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_normalized = normalize_cyrillic_search(search)
            search_term = f"%{search_normalized}%"
            
            print(f"üîç DEBUG: CYRILLIC SEARCH - original: '{search}' -> normalized: '{search_normalized}' -> term: '{search_term}'")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            all_drivers_debug = db.query(Driver).filter(Driver.taxipark_id == taxipark_id).all()
            print(f"üîç DEBUG: All drivers in taxipark {taxipark_id}:")
            
            matching_driver_ids = []
            for driver in all_drivers_debug:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è
                driver_first_normalized = normalize_cyrillic_search(driver.first_name or "")
                driver_last_normalized = normalize_cyrillic_search(driver.last_name or "")
                driver_full_normalized = f"{driver_first_normalized} {driver_last_normalized}".strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                matches = []
                if search_normalized in driver_first_normalized:
                    matches.append("first_name")
                if search_normalized in driver_last_normalized:
                    matches.append("last_name")
                if search_normalized in driver_full_normalized:
                    matches.append("full_name")
                
                print(f"üîç DEBUG: Driver: '{driver.first_name} {driver.last_name}' -> '{driver_full_normalized}' (matches: {matches})")
                
                if matches:
                    matching_driver_ids.append(driver.id)
            
            print(f"üîç DEBUG: Found {len(matching_driver_ids)} matching drivers: {matching_driver_ids}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º ID
            if matching_driver_ids:
                query = query.filter(Driver.id.in_(matching_driver_ids))
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–µ–ª–∞–µ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                query = query.filter(Driver.id == -1)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        total_drivers = query.count()
        print(f"üîç DEBUG: Total drivers after filtering: {total_drivers}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_pages = (total_drivers + per_page - 1) // per_page
        offset = (page - 1) * per_page
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        drivers = query.offset(offset).limit(per_page).all()
        print(f"üîç DEBUG: Drivers retrieved for page: {len(drivers)}")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è—Ö
        if search:
            print(f"üîç DEBUG: Found {len(drivers)} drivers for search '{search}'")
            for driver in drivers:
                full_name = f"{driver.first_name} {driver.last_name}"
                print(f"üîç DEBUG: Driver found: '{full_name}' (search: '{search}')")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = DispatcherService.get_dispatcher_stats(db, taxipark_id)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥–∏—Ç–µ–ª–µ–π
        active_drivers = db.query(Driver).filter(Driver.taxipark_id == taxipark_id, Driver.is_active == True).count()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        all_drivers = db.query(Driver).filter(Driver.taxipark_id == taxipark_id).all()
        tariffs = set()
        for driver in all_drivers:
            if driver.tariff:
                tariffs.add(driver.tariff)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        has_filters = any([status != "all", tariff, search])
        
        return templates.TemplateResponse("dispatcher/drivers.html", {
            "request": request,
            "dispatcher": dispatcher,
            "taxipark_id": taxipark_id,
            "drivers": drivers,
            "total_drivers": total_drivers,
            "active_drivers": active_drivers,
            "balance": stats["balance"],
            "current_page": page,
            "total_pages": total_pages,
            "per_page": per_page,
            "filters": {
                "status": status,
                "tariff": tariff,
                "search": search
            },
            "filter_options": {
                "tariffs": sorted(tariffs)
            },
            "has_filters": has_filters
        })
    except Exception as e:
        print(f"Error in dispatch_drivers: {e}")
        return HTMLResponse(content=f"<h1>–û—à–∏–±–∫–∞</h1><p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {str(e)}</p>", status_code=500)

@router.get("/cars", response_class=HTMLResponse)
async def dispatch_cars(
    request: Request, 
    db: Session = Depends(get_db), 
    page: int = 1, 
    per_page: int = 10,
    status: str = "all",
    brand: str = "",
    model: str = "",
    color: str = "",
    year: str = ""
):
    try:
        dispatcher = getattr(request.state, 'dispatcher', None)
        taxipark_id = getattr(request.state, 'taxipark_id', None)
        
        if not dispatcher:
            return RedirectResponse(url='/disp/auth/login', status_code=302)
        
        from app.models.driver import Driver
        from app.services.dispatcher_service import DispatcherService
        from sqlalchemy import func, or_
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞
        query = db.query(Driver).filter(Driver.taxipark_id == taxipark_id)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if status == "active":
            query = query.filter(Driver.is_active == True)
        elif status == "inactive":
            query = query.filter(Driver.is_active == False)
        
        if brand:
            query = query.filter(Driver.car_model.contains(brand))
        
        if model:
            query = query.filter(Driver.car_model.contains(model))
        
        if color:
            query = query.filter(Driver.car_color.contains(color))
        
        if year:
            query = query.filter(Driver.car_year.contains(year))
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        total_cars = query.count()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_pages = (total_cars + per_page - 1) // per_page
        offset = (page - 1) * per_page
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        cars = query.offset(offset).limit(per_page).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = DispatcherService.get_dispatcher_stats(db, taxipark_id)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        active_cars = db.query(Driver).filter(Driver.taxipark_id == taxipark_id, Driver.is_active == True).count()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        all_cars = db.query(Driver).filter(Driver.taxipark_id == taxipark_id).all()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏
        brands = set()
        models = set()
        colors = set()
        years = set()
        
        for car in all_cars:
            if car.car_model:
                parts = car.car_model.split(' ', 1)
                if len(parts) > 0:
                    brands.add(parts[0])
                if len(parts) > 1:
                    models.add(parts[1])
            if car.car_color:
                colors.add(car.car_color)
            if car.car_year:
                years.add(car.car_year)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        has_filters = any([status != "all", brand, model, color, year])
        
        return templates.TemplateResponse("dispatcher/cars.html", {
            "request": request,
            "dispatcher": dispatcher,
            "taxipark_id": taxipark_id,
            "cars": cars,
            "total_cars": total_cars,
            "active_cars": active_cars,
            "balance": stats["balance"],
            "current_page": page,
            "total_pages": total_pages,
            "per_page": per_page,
            "filters": {
                "status": status,
                "brand": brand,
                "model": model,
                "color": color,
                "year": year
            },
            "filter_options": {
                "brands": sorted(brands),
                "models": sorted(models),
                "colors": sorted(colors),
                "years": sorted(years)
            },
            "has_filters": has_filters
        })
    except Exception as e:
        print(f"Error in dispatch_cars: {e}")
        return HTMLResponse(content=f"<h1>–û—à–∏–±–∫–∞</h1><p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {str(e)}</p>", status_code=500)

@router.get("/new-order", response_class=HTMLResponse)
async def dispatch_new_order(request: Request, db: Session = Depends(get_db)):
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        return RedirectResponse(url='/disp/auth/login', status_code=302)
    
    from app.models.driver import Driver
    from app.models.order import Order
    from app.services.dispatcher_service import DispatcherService
    from datetime import datetime
    import random
    import pytz
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–π
    drivers = db.query(Driver).filter(
        Driver.taxipark_id == taxipark_id,
        Driver.is_active == True,
        Driver.online_status == 'online'
    ).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
    from sqlalchemy.orm import joinedload
    recent_orders = db.query(Order).options(joinedload(Order.driver)).filter(
        Order.taxipark_id == taxipark_id
    ).order_by(Order.created_at.desc()).limit(10).all()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = DispatcherService.get_dispatcher_stats(db, taxipark_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    order_number = f"WDD10{random.randint(1000000, 9999999)}"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞ (UTC+6)
    kyrgyzstan_tz = pytz.timezone('Etc/GMT-6')  # UTC+6, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    current_datetime = datetime.now(kyrgyzstan_tz)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ
    from app.models.taxipark import TaxiPark
    taxipark = db.query(TaxiPark).filter(TaxiPark.id == taxipark_id).first()
    
    return templates.TemplateResponse("dispatcher/new_order.html", {
        "request": request,
        "dispatcher": dispatcher,
        "taxipark_id": taxipark_id,
        "taxipark": taxipark,
        "drivers": drivers,
        "recent_orders": recent_orders,
        "balance": stats["balance"],
        "order_number": order_number,
        "current_datetime": current_datetime
    })

@router.get("/chat", response_class=HTMLResponse)
async def dispatch_chat(request: Request):
    return HTMLResponse(content="<h1>–ß–∞—Ç —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏</h1><p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>")

@router.get("/balance-request", response_class=HTMLResponse)
async def dispatch_balance_request(request: Request):
    return HTMLResponse(content="<h1>–ó–∞–ø—Ä–æ—Å –Ω–∞ –±–∞–ª–∞–Ω—Å</h1><p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>")

@router.get("/balance-topup", response_class=HTMLResponse)
async def dispatch_balance_topup(
    request: Request, 
    db: Session = Depends(get_db), 
    page: int = 1, 
    per_page: int = 10,
    status: str = "all",
    tariff: str = ""
):
    try:
        dispatcher = getattr(request.state, 'dispatcher', None)
        taxipark_id = getattr(request.state, 'taxipark_id', None)
        
        if not dispatcher:
            return RedirectResponse(url='/disp/auth/login', status_code=302)
        
        from app.models.driver import Driver
        from app.services.dispatcher_service import DispatcherService
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞
        query = db.query(Driver).filter(Driver.taxipark_id == taxipark_id)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if status == "active":
            query = query.filter(Driver.is_active == True)
        elif status == "inactive":
            query = query.filter(Driver.is_active == False)
        
        if tariff:
            query = query.filter(Driver.tariff == tariff)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        total_drivers = query.count()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_pages = (total_drivers + per_page - 1) // per_page
        offset = (page - 1) * per_page
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        drivers = query.offset(offset).limit(per_page).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = DispatcherService.get_dispatcher_stats(db, taxipark_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ
        from app.models.taxipark import TaxiPark
        taxipark = db.query(TaxiPark).filter(TaxiPark.id == taxipark_id).first()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        all_drivers = db.query(Driver).filter(Driver.taxipark_id == taxipark_id).all()
        tariffs = set()
        for driver in all_drivers:
            if driver.tariff:
                tariffs.add(driver.tariff)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        has_filters = any([status != "all", tariff])
        
        return templates.TemplateResponse("dispatcher/pay_balance.html", {
            "request": request,
            "dispatcher": dispatcher,
            "taxipark_id": taxipark_id,
            "taxipark": taxipark,
            "drivers": drivers,
            "total_drivers": total_drivers,
            "balance": stats["balance"],
            "current_page": page,
            "total_pages": total_pages,
            "per_page": per_page,
            "filters": {
                "status": status,
                "tariff": tariff
            },
            "filter_options": {
                "tariffs": sorted(tariffs)
            },
            "has_filters": has_filters
        })
    except Exception as e:
        print(f"Error in dispatch_balance_topup: {e}")
        return HTMLResponse(content=f"<h1>–û—à–∏–±–∫–∞</h1><p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}</p>", status_code=500)

@router.get("/driver-create", response_class=HTMLResponse)
async def dispatch_driver_create(request: Request):
    return HTMLResponse(content="<h1>–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è</h1><p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>")

@router.get("/photo-control", response_class=HTMLResponse)
async def dispatch_photo_control(request: Request, db: Session = Depends(get_db), status: str = "all"):
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        return RedirectResponse(url='/disp/auth/login', status_code=302)
    
    from app.models.driver import Driver
    from app.models.photo_verification import PhotoVerification
    from app.models.taxipark import TaxiPark
    from app.services.dispatcher_service import DispatcherService
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º undefined –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if not status or status == "undefined":
        status = "all"
    
    print(f"üîç DEBUG: Photo control page - status: {status}, taxipark_id: {taxipark_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    query = db.query(PhotoVerification).filter(PhotoVerification.taxipark_id == taxipark_id)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status == "approved":
        query = query.filter(PhotoVerification.status == "approved")
    elif status == "rejected":
        query = query.filter(PhotoVerification.status == "rejected")
    elif status == "pending":
        query = query.filter(PhotoVerification.status == "pending")
    # –ï—Å–ª–∏ status == "all", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    
    verifications = query.order_by(PhotoVerification.created_at.desc()).all()
    
    print(f"üîç DEBUG: Found {len(verifications)} photo verifications for status '{status}'")
    print(f"üîç DEBUG: has_filters will be: {status != 'all'}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = DispatcherService.get_dispatcher_stats(db, taxipark_id)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞—è–≤–æ–∫
    total_verifications = db.query(PhotoVerification).filter(PhotoVerification.taxipark_id == taxipark_id).count()
    pending_verifications = db.query(PhotoVerification).filter(PhotoVerification.taxipark_id == taxipark_id, PhotoVerification.status == "pending").count()
    approved_verifications = db.query(PhotoVerification).filter(PhotoVerification.taxipark_id == taxipark_id, PhotoVerification.status == "approved").count()
    rejected_verifications = db.query(PhotoVerification).filter(PhotoVerification.taxipark_id == taxipark_id, PhotoVerification.status == "rejected").count()
    
    print(f"üîç DEBUG: Stats - Total: {total_verifications}, Pending: {pending_verifications}, Approved: {approved_verifications}, Rejected: {rejected_verifications}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ
    taxipark = db.query(TaxiPark).filter(TaxiPark.id == taxipark_id).first()
    
    return templates.TemplateResponse("dispatcher/drivers_control.html", {
        "request": request,
        "dispatcher": dispatcher,
        "taxipark": taxipark,
        "taxipark_id": taxipark_id,
        "verifications": verifications,
        "total_verifications": total_verifications,
        "pending_verifications": pending_verifications,
        "approved_verifications": approved_verifications,
        "rejected_verifications": rejected_verifications,
        "balance": stats["balance"],
        "current_status": status,
        "has_filters": status != "all"
    })

@router.get("/profile", response_class=HTMLResponse)
async def dispatch_profile(request: Request, db: Session = Depends(get_db)):
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        return RedirectResponse(url='/disp/auth/login', status_code=302)
    
    from app.services.dispatcher_service import DispatcherService
    from app.models.taxipark import TaxiPark
    from datetime import datetime, timedelta
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ
    taxipark = db.query(TaxiPark).filter(TaxiPark.id == taxipark_id).first()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã
    days_working = 0
    if dispatcher.created_at:
        days_working = (datetime.now() - dispatcher.created_at).days
    
    return templates.TemplateResponse("dispatcher/profile.html", {
        "request": request,
        "dispatcher": dispatcher,
        "taxipark": taxipark,
        "days_working": days_working
    })

@router.get("/api/dashboard-stats")
async def get_dashboard_stats(request: Request, db: Session = Depends(get_db)):
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not taxipark_id:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        )
    
    from app.services.dispatcher_service import DispatcherService
    stats = DispatcherService.get_dispatcher_stats(db, taxipark_id)
    
    return {
        "balance": stats["balance"],
        "drivers_count": stats["drivers_count"],
        "orders_stats": stats["orders_stats"],
        "orders": [
            {
                "id": order.id,
                "order_number": order.order_number if order.order_number else order.id,
                "created_at": order.created_at.isoformat() if order.created_at else None,
                "status": order.status,
                "status_display": order.get_status_display(),
                "phone": order.client_phone,
                "from_address": order.pickup_address,
                "to_address": order.destination_address,
                "driver_name": order.get_driver_display_name(),
                "driver_phone": order.driver.phone_number if order.driver else None,
                "amount": order.price,
                "tariff": "–ö–æ–º—Ñ–æ—Ä—Ç"
            }
            for order in stats["orders"]
        ]
    }

@router.get("/api/topup-history")
async def get_topup_history(request: Request, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞"""
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not taxipark_id:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        )
    
    from app.services.dispatcher_service import DispatcherService
    topups = DispatcherService.get_topup_history(db, taxipark_id)
    
    return {
        "topups": [
            {
                "id": topup.id,
                "driver_name": f"{topup.driver.first_name} {topup.driver.last_name}",
                "driver_phone": topup.driver.phone_number,
                "amount": topup.amount,
                "description": topup.description,
                "reference": topup.reference,
                "created_at": topup.created_at.isoformat() if topup.created_at else None,
                "status": topup.status
            }
            for topup in topups
        ]
    }

@router.post("/api/driver-status")
async def update_driver_status(request: Request, db: Session = Depends(get_db)):
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        data = await request.json()
        driver_id = data.get('driver_id')
        is_active = data.get('is_active')
        
        if not driver_id or is_active is None:
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        from app.models.driver import Driver
        from datetime import datetime
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫ —Ç–æ–º—É –∂–µ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫—É
        driver = db.query(Driver).filter(
            Driver.id == driver_id,
            Driver.taxipark_id == taxipark_id
        ).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="Driver not found")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        driver.is_active = is_active
        if is_active:
            driver.online_status = 'online'
            driver.last_online_at = datetime.now()
        else:
            driver.online_status = 'offline'
        db.commit()
        
        return {"success": True, "message": "Driver status updated successfully"}
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/api/online-drivers")
async def get_online_drivers_for_dispatcher(request: Request, db: Session = Depends(get_db)):
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        from app.models.driver import Driver
        from datetime import datetime, timedelta
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç
        cutoff_time = datetime.now() - timedelta(minutes=2)
        inactive_drivers = db.query(Driver).filter(
            Driver.taxipark_id == taxipark_id,
            Driver.online_status == 'online',
            Driver.last_online_at < cutoff_time
        ).all()
        
        for driver in inactive_drivers:
            driver.online_status = 'offline'
            print(f"üö´ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å {driver.id} - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        if inactive_drivers:
            db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–π
        online_drivers = db.query(Driver).filter(
            Driver.taxipark_id == taxipark_id,
            Driver.is_active == True,
            Driver.online_status == 'online'
        ).all()
        
        return {
            "success": True,
            "drivers": [driver.to_dict() for driver in online_drivers]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/api/topup-balance")
async def topup_driver_balance(request: Request, db: Session = Depends(get_db)):
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        data = await request.json()
        driver_id = data.get('driver_id')
        amount = data.get('amount')
        
        print(f"üîç DEBUG: Topup request - driver_id: {driver_id}, amount: {amount}")
        print(f"üîç DEBUG: Dispatcher: {dispatcher}")
        print(f"üîç DEBUG: Taxipark ID: {taxipark_id}")
        
        if not driver_id or not amount:
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        if amount <= 0:
            raise HTTPException(status_code=400, detail="Amount must be positive")
        
        from app.models.driver import Driver
        from app.models.transaction import DriverTransaction
        from datetime import datetime
        import uuid
        
        driver = db.query(Driver).filter(
            Driver.id == driver_id,
            Driver.taxipark_id == taxipark_id
        ).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="Driver not found")
        
        current_balance = driver.balance if driver.balance else 0
        new_balance = current_balance + amount
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        dispatcher_name = "Unknown"
        if dispatcher:
            if hasattr(dispatcher, 'username'):
                dispatcher_name = dispatcher.username
            elif hasattr(dispatcher, 'name'):
                dispatcher_name = dispatcher.name
            elif hasattr(dispatcher, 'first_name'):
                dispatcher_name = f"{dispatcher.first_name} {dispatcher.last_name if hasattr(dispatcher, 'last_name') else ''}"
        
        print(f"üîç DEBUG: Dispatcher name: {dispatcher_name}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        transaction = DriverTransaction(
            driver_id=driver_id,
            type='topup',
            amount=amount,
            description=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º {dispatcher_name}',
            status='completed',
            reference=f'TOPUP_{uuid.uuid4().hex[:8].upper()}',
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤–æ–¥–∏—Ç–µ–ª—è
        driver.balance = new_balance
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        db.add(transaction)
        db.commit()
        
        print(f"üîç DEBUG: Balance topup recorded:")
        print(f"üîç DEBUG: - Driver: {driver.first_name} {driver.last_name} (ID: {driver_id})")
        print(f"üîç DEBUG: - Amount: {amount}")
        print(f"üîç DEBUG: - Old balance: {current_balance}")
        print(f"üîç DEBUG: - New balance: {new_balance}")
        print(f"üîç DEBUG: - Transaction ID: {transaction.id}")
        print(f"üîç DEBUG: - Reference: {transaction.reference}")
        print(f"üîç DEBUG: - Dispatcher: {dispatcher_name}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        print(f"üîç [BALANCE] –ü—Ä–æ–≤–µ—Ä—è–µ–º FCM —Ç–æ–∫–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—è...")
        print(f"üîç [BALANCE] FCM —Ç–æ–∫–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {driver.fcm_token[:20] if driver.fcm_token else '–ù–ï–¢'}...")
        
        if driver.fcm_token:
            print(f"üîç [BALANCE] FCM —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
            try:
                from app.services.fcm_service import fcm_service
                print(f"üîç [BALANCE] FCM —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                driver_name = f"{driver.first_name} {driver.last_name}"
                
                print(f"üîç [BALANCE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞...")
                print(f"üîç [BALANCE] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ç–æ–∫–µ–Ω={driver.fcm_token[:20]}..., –∏–º—è={driver_name}, —Å—É–º–º–∞={amount}, –±–∞–ª–∞–Ω—Å={new_balance}")
                
                success = fcm_service.send_balance_topup(
                    driver.fcm_token,
                    driver_name,
                    amount,
                    new_balance
                )
                print(f"üîç [BALANCE] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {success}")
            except Exception as e:
                print(f"‚ùå [BALANCE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                import traceback
                print(f"‚ùå [BALANCE] Stack trace: {traceback.format_exc()}")
        else:
            print("‚ö†Ô∏è [BALANCE] FCM —Ç–æ–∫–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        return {
            "success": True, 
            "message": "Balance topped up successfully",
            "new_balance": new_balance,
            "transaction_id": transaction.id,
            "reference": transaction.reference
        }
        
    except Exception as e:
        db.rollback()
        print(f"üîç DEBUG: Error in topup_driver_balance: {str(e)}")
        print(f"üîç DEBUG: Error type: {type(e).__name__}")
        import traceback
        print(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/api/create-order")
async def create_order(request: Request, db: Session = Depends(get_db)):
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        data = await request.json()
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['driver_id', 'tariff', 'payment_method', 'pickup_address', 'destination_address']
        for field in required_fields:
            if not data.get(field):
                raise HTTPException(status_code=400, detail=f"Missing required field: {field}")
        
        from app.models.driver import Driver
        from app.models.order import Order
        from datetime import datetime
        import random
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        driver = db.query(Driver).filter(
            Driver.id == data['driver_id'],
            Driver.taxipark_id == taxipark_id,
            Driver.is_active == True
        ).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="Driver not found or inactive")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_number = data.get('order_number')
        if not order_number:
            order_number = f"WDD{random.randint(1000000, 9999999)}"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        new_order = Order(
            order_number=order_number,
            client_name=data.get('client_name', ''),
            client_phone=data.get('client_phone', ''),
            pickup_address=data['pickup_address'],
            pickup_latitude=data.get('pickup_latitude'),
            pickup_longitude=data.get('pickup_longitude'),
            destination_address=data['destination_address'],
            destination_latitude=data.get('destination_latitude'),
            destination_longitude=data.get('destination_longitude'),
            price=data.get('price', 0.0),
            distance=data.get('distance'),
            duration=data.get('duration'),
            status='received',  # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            driver_id=data['driver_id'],
            taxipark_id=taxipark_id,
            tariff=data['tariff'],
            payment_method=data['payment_method'],
            notes=data.get('notes', ''),
            created_at=datetime.now()
        )
        
        db.add(new_order)
        db.commit()
        db.refresh(new_order)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—é —á–µ—Ä–µ–∑ WebSocket
        from app.websocket.manager import websocket_manager
        await websocket_manager.broadcast_new_order(
            new_order.to_dict(), 
            taxipark_id, 
            new_order.driver_id
        )
        
        return {
            "success": True,
            "message": "Order created successfully",
            "order": new_order.to_dict()
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/api/orders")
async def get_orders(request: Request, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        from app.models.order import Order
        from sqlalchemy import desc
        
        orders = db.query(Order).filter(
            Order.taxipark_id == taxipark_id
        ).order_by(desc(Order.created_at)).limit(50).all()
        
        return {
            "success": True,
            "orders": [order.to_dict() for order in orders]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/api/orders/{order_id}")
async def get_order(order_id: int, request: Request, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑"""
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        from app.models.order import Order
        
        order = db.query(Order).filter(
            Order.id == order_id,
            Order.taxipark_id == taxipark_id
        ).first()
        
        if not order:
            raise HTTPException(status_code=404, detail="Order not found")
        
        return {
            "success": True,
            "order": order.to_dict()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.put("/api/orders/{order_id}/status")
async def update_order_status(order_id: int, request: Request, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    dispatcher = getattr(request.state, 'dispatcher', None)
    taxipark_id = getattr(request.state, 'taxipark_id', None)
    
    if not dispatcher:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        data = await request.json()
        new_status = data.get('status')
        
        if not new_status:
            raise HTTPException(status_code=400, detail="Status is required")
        
        valid_statuses = ['received', 'accepted', 'navigating_to_a', 'arrived_at_a', 'navigating_to_b', 'completed', 'cancelled']
        if new_status not in valid_statuses:
            raise HTTPException(status_code=400, detail=f"Invalid status. Must be one of: {valid_statuses}")
        
        from app.models.order import Order
        from datetime import datetime
        
        order = db.query(Order).filter(
            Order.id == order_id,
            Order.taxipark_id == taxipark_id
        ).first()
        
        if not order:
            raise HTTPException(status_code=404, detail="Order not found")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        order.status = new_status
        now = datetime.now()
        
        if new_status == 'accepted':
            order.accepted_at = now
        elif new_status == 'arrived_at_a':
            order.arrived_at_a = now
        elif new_status == 'navigating_to_b':
            order.started_to_b = now
        elif new_status == 'completed':
            order.completed_at = now
        elif new_status == 'cancelled':
            order.cancelled_at = now
        
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket
        from app.websocket.manager import websocket_manager
        await websocket_manager.broadcast_order_status_update(
            order.to_dict(), 
            taxipark_id
        )
        
        return {
            "success": True,
            "message": "Order status updated successfully",
            "order": order.to_dict()
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))
