import json
import os
from fastapi import APIRouter, Request, HTTPException, status, Depends
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from app.database.session import get_db
from app.services.superadmin_service import SuperAdminService
from app.services.analytics_service import AnalyticsService
from app.services.taxipark_service import TaxiParkService
from app.services.administrator_service import AdministratorService
from app.schemas.superadmin import SuperAdminCreate, SuperAdminResponse
from app.schemas.taxipark import TaxiParkCreate, TaxiParkUpdate, TaxiParkList
from app.schemas.administrator import AdministratorCreate, AdministratorUpdate, AdministratorList
from typing import List, Optional

router = APIRouter(prefix="/superadmin", tags=["superadmin"])
templates = Jinja2Templates(directory="templates")

# –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_DATA_FILE = "admin_data.json"

def save_admin_data_to_json(admin_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ JSON —Ñ–∞–π–ª"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        existing_data = []
        if os.path.exists(ADMIN_DATA_FILE):
            with open(ADMIN_DATA_FILE, 'r', encoding='utf-8') as f:
                existing_data = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        existing_data.append(admin_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(ADMIN_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(existing_data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON: {e}")

def load_admin_data_from_json() -> List[dict]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(ADMIN_DATA_FILE):
            with open(ADMIN_DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ JSON: {e}")
        return []

@router.get("/login", response_class=HTMLResponse)
async def superadmin_login_page(request: Request):
    return templates.TemplateResponse("superadmin/login.html", {"request": request})

@router.get("/dashboard", response_class=HTMLResponse)
async def superadmin_dashboard_page(request: Request):
    return templates.TemplateResponse("superadmin/dashboard.html", {"request": request})

@router.get("/users", response_class=HTMLResponse)
async def superadmin_users_page(request: Request):
    return templates.TemplateResponse("superadmin/users.html", {"request": request})

@router.get("/drivers", response_class=HTMLResponse)
async def superadmin_drivers_page(request: Request):
    return templates.TemplateResponse("superadmin/drivers.html", {"request": request})

@router.get("/orders", response_class=HTMLResponse)
async def superadmin_orders_page(request: Request):
    return templates.TemplateResponse("superadmin/orders.html", {"request": request})

@router.get("/analytics", response_class=HTMLResponse)
async def superadmin_analytics_page(request: Request):
    return templates.TemplateResponse("superadmin/analytics.html", {"request": request})

@router.get("/settings", response_class=HTMLResponse)
async def superadmin_settings_page(request: Request):
    return templates.TemplateResponse("superadmin/settings.html", {"request": request})

@router.get("/taxiparks", response_class=HTMLResponse)
async def superadmin_taxiparks_page(request: Request):
    return templates.TemplateResponse("superadmin/taxiparks.html", {"request": request})

@router.get("/admins", response_class=HTMLResponse)
async def superadmin_admins_page(request: Request):
    return templates.TemplateResponse("superadmin/admins.html", {"request": request})

# API endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.get("/api/metrics")
async def get_metrics(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        stats = AnalyticsService.get_dashboard_stats(db, days=7)
        print(f"üìä METRICS: –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏: {stats}")
        print(f"üìä METRICS: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
        for key, value in stats.items():
            print(f"  {key}: {value} (—Ç–∏–ø: {type(value)})")
        return stats
    except Exception as e:
        print(f"‚ùå METRICS: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {str(e)}"
        )

@router.get("/api/superadmins", response_model=List[SuperAdminResponse])
async def get_superadmins_list(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤"""
    try:
        superadmins = SuperAdminService.get_superadmins(db)
        return superadmins
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤: {str(e)}"
        )

@router.post("/api/superadmins", response_model=SuperAdminResponse)
async def create_superadmin(
    superadmin_data: SuperAdminCreate,
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    try:
        new_superadmin = SuperAdminService.create_superadmin(db, superadmin_data)
        return new_superadmin
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞: {str(e)}"
        )

# API endpoints –¥–ª—è —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–æ–≤
@router.get("/api/taxiparks", response_model=List[TaxiParkList])
async def get_taxiparks_list(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–æ–≤"""
    try:
        from app.models.driver import Driver
        from app.models.administrator import Administrator
        
        taxiparks = TaxiParkService.get_taxiparks(db)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞
        taxiparks_with_counts = []
        for taxipark in taxiparks:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
            drivers_count = db.query(Driver).filter(Driver.taxipark_id == taxipark.id).count()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
            dispatchers_count = db.query(Administrator).filter(Administrator.taxipark_id == taxipark.id).count()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
            taxipark.drivers_count = drivers_count
            taxipark.dispatchers_count = dispatchers_count
            
            taxiparks_with_counts.append(taxipark)
        
        return taxiparks_with_counts
    except Exception as e:
        print(f"‚ùå ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–æ–≤: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–æ–≤: {str(e)}"
        )

@router.post("/api/taxiparks", response_model=TaxiParkList)
async def create_taxipark(
    taxipark_data: TaxiParkCreate,
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞–∫—Å–æ–ø–∞—Ä–∫"""
    try:
        new_taxipark = TaxiParkService.create_taxipark(db, taxipark_data)
        return new_taxipark
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞: {str(e)}"
        )

@router.put("/api/taxiparks/{taxipark_id}")
async def update_taxipark(
    taxipark_id: int,
    taxipark_data: dict,
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–∫—Å–æ–ø–∞—Ä–∫"""
    try:
        update_data = {}
        if "is_active" in taxipark_data:
            update_data["is_active"] = taxipark_data["is_active"]
        if "name" in taxipark_data:
            update_data["name"] = taxipark_data["name"]
        if "commission_percent" in taxipark_data:
            update_data["commission_percent"] = taxipark_data["commission_percent"]
        
        if not update_data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            )
        
        updated_taxipark = TaxiParkService.update_taxipark(db, taxipark_id, TaxiParkUpdate(**update_data))
        if not updated_taxipark:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return {"message": "–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ", "taxipark": updated_taxipark}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞: {str(e)}"
        )

@router.put("/api/taxiparks/{taxipark_id}/commission")
async def update_taxipark_commission(
    taxipark_id: int,
    commission_data: dict,
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞"""
    try:
        commission_percent = commission_data.get("commission_percent")
        if commission_percent is None:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏"
            )
        
        updated_taxipark = TaxiParkService.update_commission(db, taxipark_id, commission_percent)
        if not updated_taxipark:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return {"message": "–ö–æ–º–∏—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "taxipark": updated_taxipark}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏: {str(e)}"
        )

@router.delete("/api/taxiparks/{taxipark_id}")
async def delete_taxipark(
    taxipark_id: int,
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª–∏—Ç—å —Ç–∞–∫—Å–æ–ø–∞—Ä–∫"""
    try:
        success = TaxiParkService.delete_taxipark(db, taxipark_id)
        if not success:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return {"message": "–¢–∞–∫—Å–æ–ø–∞—Ä–∫ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞: {str(e)}"
        )

# API endpoints –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.get("/api/administrators")
async def get_administrators_list(
    taxipark_id: Optional[int] = None,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫—É"""
    try:
        administrators = AdministratorService.get_administrators_with_taxipark_info(db, taxipark_id)
        return administrators
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}"
        )

@router.post("/api/administrators")
async def create_administrator(
    administrator_data: AdministratorCreate,
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫
        taxipark = TaxiParkService.get_taxipark(db, administrator_data.taxipark_id)
        if not taxipark:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        new_administrator = AdministratorService.create_administrator(db, administrator_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
        admin_json_data = {
            "id": new_administrator.id,
            "login": administrator_data.login,
            "password": administrator_data.password,
            "first_name": administrator_data.first_name,
            "last_name": administrator_data.last_name,
            "taxipark_id": administrator_data.taxipark_id,
            "created_at": new_administrator.created_at.isoformat() if new_administrator.created_at else None
        }
        save_admin_data_to_json(admin_json_data)
        
        return {"message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", "administrator": new_administrator}
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}"
        )

@router.put("/api/administrators/{administrator_id}/toggle-status")
async def toggle_administrator_status(
    administrator_id: int,
    db: Session = Depends(get_db)
):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)"""
    try:
        updated_administrator = AdministratorService.toggle_administrator_status(db, administrator_id)
        if not updated_administrator:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        action = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if updated_administrator.is_active else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        return {"message": f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ {action}", "administrator": updated_administrator}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}"
        )

@router.delete("/api/administrators/{administrator_id}")
async def delete_administrator(
    administrator_id: int,
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        success = AdministratorService.delete_administrator(db, administrator_id)
        if not success:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return {"message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}"
        )

@router.get("/api/administrators/count")
async def get_administrators_count(
    taxipark_id: Optional[int] = None,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫—É"""
    try:
        count = AdministratorService.get_administrator_count(db, taxipark_id)
        return {"count": count}
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}"
        )

@router.get("/api/administrators/json-data")
async def get_administrators_json_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–µ –∞–¥–º–∏–Ω—ã)"""
    try:
        admin_data = load_admin_data_from_json()
        return {"administrators": admin_data}
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON: {str(e)}"
        )

@router.get("/api/drivers")
async def get_drivers_list(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    try:
        from app.models.driver import Driver
        from app.models.taxipark import TaxiPark
        
        print(f"üîç DEBUG: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
        
        drivers = db.query(Driver).all()
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(drivers)}")
        
        drivers_data = []
        for driver in drivers:
            taxipark_name = "–ù–µ —É–∫–∞–∑–∞–Ω"
            if driver.taxipark_id:
                taxipark = db.query(TaxiPark).filter(TaxiPark.id == driver.taxipark_id).first()
                if taxipark:
                    taxipark_name = taxipark.name
            
            drivers_data.append({
                "id": driver.id,
                "first_name": driver.first_name,
                "last_name": driver.last_name,
                "phone_number": driver.phone_number,
                "car_model": driver.car_model,
                "car_number": driver.car_number,
                "balance": float(driver.balance) if driver.balance else 0.0,
                "tariff": driver.tariff,
                "taxipark_name": taxipark_name,
                "is_active": driver.is_active,
                "created_at": driver.created_at.isoformat() if driver.created_at else None,
                "updated_at": driver.updated_at.isoformat() if driver.updated_at else None
            })
        
        print(f"üîç DEBUG: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(drivers_data)}")
        return {"drivers": drivers_data, "count": len(drivers_data)}
    except Exception as e:
        print(f"‚ùå ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {str(e)}"
        )

@router.delete("/api/drivers/{driver_id}")
async def delete_driver(
    driver_id: int,
    reason: str,
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã"""
    try:
        from app.models.driver import Driver
        
        driver = db.query(Driver).filter(Driver.id == driver_id).first()
        if not driver:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        driver_data = {
            "id": driver.id,
            "first_name": driver.first_name,
            "last_name": driver.last_name,
            "phone_number": driver.phone_number,
            "deleted_reason": reason,
            "deleted_at": datetime.now().isoformat(),
            "contact_phone": "+996 559 868 878"
        }
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É deleted_drivers
        # –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        
        taxipark_id = driver.taxipark_id
        db.delete(driver)
        db.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ
        TaxiParkService.update_drivers_count(db, taxipark_id)
        
        print(f"üóëÔ∏è –í–æ–¥–∏—Ç–µ–ª—å {driver.first_name} {driver.last_name} —É–¥–∞–ª–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        return {
            "message": "–í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            "driver_data": driver_data
        }
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}"
        )

@router.put("/api/drivers/{driver_id}/block")
async def block_driver(
    driver_id: int,
    reason: str,
    db: Session = Depends(get_db)
):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã"""
    try:
        from app.models.driver import Driver
        from datetime import datetime
        
        driver = db.query(Driver).filter(Driver.id == driver_id).first()
        if not driver:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        block_data = {
            "id": driver.id,
            "first_name": driver.first_name,
            "last_name": driver.last_name,
            "phone_number": driver.phone_number,
            "block_reason": reason,
            "blocked_at": datetime.now().isoformat(),
            "contact_phone": "+996 559 868 878"
        }
        
        driver.is_active = False
        db.commit()
        db.refresh(driver)
        
        print(f"üö´ –í–æ–¥–∏—Ç–µ–ª—å {driver.first_name} {driver.last_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        return {
            "message": "–í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            "driver_data": block_data
        }
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}"
        )

@router.put("/api/drivers/{driver_id}/unblock")
async def unblock_driver(
    driver_id: int,
    db: Session = Depends(get_db)
):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        from app.models.driver import Driver
        
        driver = db.query(Driver).filter(Driver.id == driver_id).first()
        if not driver:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        driver.is_active = True
        db.commit()
        db.refresh(driver)
        
        print(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver.first_name} {driver.last_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        return {
            "message": "–í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            "driver": {
                "id": driver.id,
                "first_name": driver.first_name,
                "last_name": driver.last_name,
                "is_active": driver.is_active
            }
        }
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}"
        )

@router.get("/api/drivers/stats")
async def get_drivers_stats(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º"""
    try:
        stats = AnalyticsService.get_drivers_stats(db)
        return stats
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {str(e)}"
        )

@router.get("/api/orders/stats")
async def get_orders_stats(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º"""
    try:
        stats = AnalyticsService.get_orders_stats(db, days=7)
        return stats
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}"
        )
