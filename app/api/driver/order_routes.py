from fastapi import APIRouter, Request, HTTPException, Depends
from sqlalchemy.orm import Session
from app.database.session import get_db
from app.models.driver import Driver
from app.models.order import Order
from app.models.taxipark import TaxiPark
from app.models.transaction import DriverTransaction
from datetime import datetime
import uuid

router = APIRouter(tags=["driver_orders"])

@router.put("/orders/{order_id}/accept")
async def accept_order(
    order_id: int,
    request: Request,
    db: Session = Depends(get_db)
):
    """–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    try:
        data = await request.json()
        driver_id = data.get('driver_id')
        
        if not driver_id:
            raise HTTPException(status_code=400, detail="Driver ID is required")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        driver = db.query(Driver).filter(Driver.id == driver_id).first()
        if not driver:
            raise HTTPException(status_code=404, detail="Driver not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
        order = db.query(Order).filter(
            Order.id == order_id,
            Order.driver_id == driver_id,
            Order.status == 'received'
        ).first()
        
        if not order:
            raise HTTPException(status_code=404, detail="Order not found or already processed")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = 'accepted'
        order.accepted_at = datetime.now()
        
        db.commit()
        
        return {
            "success": True,
            "message": "Order accepted successfully",
            "order": order.to_dict()
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.put("/orders/{order_id}/reject")
async def reject_order(
    order_id: int,
    request: Request,
    db: Session = Depends(get_db)
):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    try:
        data = await request.json()
        driver_id = data.get('driver_id')
        
        if not driver_id:
            raise HTTPException(status_code=400, detail="Driver ID is required")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        driver = db.query(Driver).filter(Driver.id == driver_id).first()
        if not driver:
            raise HTTPException(status_code=404, detail="Driver not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
        order = db.query(Order).filter(
            Order.id == order_id,
            Order.driver_id == driver_id,
            Order.status == 'received'
        ).first()
        
        if not order:
            raise HTTPException(status_code=404, detail="Order not found or already processed")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = 'cancelled'
        order.cancelled_at = datetime.now()
        
        db.commit()
        
        return {
            "success": True,
            "message": "Order rejected successfully",
            "order": order.to_dict()
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.put("/api/orders/{order_id}/status")
async def update_order_status(
    order_id: int,
    request: Request,
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    print(f"üîç [OrderRoutes] Endpoint called: PUT /api/orders/{order_id}/status")
    try:
        data = await request.json()
        driver_id = int(data.get('driver_id'))  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ integer
        new_status = data.get('status')
        
        print(f"üîç [OrderRoutes] Received request for order {order_id}")
        print(f"üîç [OrderRoutes] Driver ID: {driver_id}, Status: {new_status}")
        
        if not driver_id or not new_status:
            raise HTTPException(status_code=400, detail="Driver ID and status are required")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        driver = db.query(Driver).filter(Driver.id == driver_id).first()
        if not driver:
            print(f"‚ùå [OrderRoutes] Driver {driver_id} not found")
            raise HTTPException(status_code=404, detail="Driver not found")
        
        print(f"‚úÖ [OrderRoutes] Driver found: {driver.first_name} {driver.last_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
        order = db.query(Order).filter(
            Order.id == order_id,
            Order.driver_id == driver_id
        ).first()
        
        if not order:
            # –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –≤–æ–æ–±—â–µ
            order_exists = db.query(Order).filter(Order.id == order_id).first()
            if order_exists:
                print(f"‚ùå [OrderRoutes] Order {order_id} exists but driver_id is {order_exists.driver_id}, not {driver_id}")
                raise HTTPException(status_code=404, detail=f"Order {order_id} is not assigned to driver {driver_id}")
            else:
                print(f"‚ùå [OrderRoutes] Order {order_id} does not exist")
                raise HTTPException(status_code=404, detail="Order not found")
        
        print(f"‚úÖ [OrderRoutes] Order found: {order.order_number}, current status: {order.status}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        valid_statuses = ['accepted', 'navigating_to_a', 'arrived_at_a', 'navigating_to_b', 'completed', 'cancelled', 'rejected_by_driver']
        if new_status not in valid_statuses:
            raise HTTPException(status_code=400, detail=f"Invalid status. Must be one of: {valid_statuses}")
        
        # –õ–æ–≥–∏–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
        if new_status == 'accepted' and order.status == 'received':
            commission_result = await _process_order_commission(db, driver, order)
            if not commission_result['success']:
                return {
                    "success": False,
                    "error": commission_result['error'],
                    "error_code": "INSUFFICIENT_BALANCE",
                    "required_amount": commission_result.get('required_amount'),
                    "current_balance": commission_result.get('current_balance')
                }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        order.status = new_status
        now = datetime.now()
        
        if new_status == 'accepted':
            order.accepted_at = now
        elif new_status == 'navigating_to_a':
            order.accepted_at = now
        elif new_status == 'arrived_at_a':
            order.arrived_at_a = now
        elif new_status == 'navigating_to_b':
            order.started_to_b = now
        elif new_status == 'completed':
            order.completed_at = now
        elif new_status == 'cancelled':
            order.cancelled_at = now
        elif new_status == 'rejected_by_driver':
            order.cancelled_at = now
        
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket
        from app.websocket.manager import websocket_manager
        
        if new_status == 'rejected_by_driver':
            await websocket_manager.send_personal_message(
                {
                    "type": "order_rejected",
                    "data": order.to_dict(),
                    "timestamp": now.isoformat()
                },
                f"client_{order.client_phone}"
            )
        elif new_status == 'accepted':
            await websocket_manager.send_personal_message(
                {
                    "type": "order_accepted",
                    "data": order.to_dict(),
                    "timestamp": now.isoformat()
                },
                f"client_{order.client_phone}"
            )
        elif new_status == 'arrived_at_a':
            await websocket_manager.send_personal_message(
                {
                    "type": "driver_arrived",
                    "data": order.to_dict(),
                    "timestamp": now.isoformat()
                },
                f"client_{order.client_phone}"
            )
        elif new_status == 'completed':
            await websocket_manager.send_personal_message(
                {
                    "type": "order_completed",
                    "data": order.to_dict(),
                    "timestamp": now.isoformat()
                },
                f"client_{order.client_phone}"
            )
        
        await websocket_manager.broadcast_order_status_update(
            order.to_dict(), 
            order.taxipark_id
        )
        
        return {
            "success": True,
            "message": "Order status updated successfully",
            "order": order.to_dict()
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))


async def _process_order_commission(db: Session, driver: Driver, order: Order) -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        print(f"üí∞ [Commission] Processing commission for order {order.id}")
        print(f"üí∞ [Commission] Driver: {driver.first_name} {driver.last_name} (ID: {driver.id})")
        print(f"üí∞ [Commission] Order price: {order.price}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ
        taxipark = db.query(TaxiPark).filter(TaxiPark.id == driver.taxipark_id).first()
        if not taxipark:
            return {
                "success": False,
                "error": "–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        commission_percent = taxipark.commission_percent or 15.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 15%
        order_price = order.price or 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é
        commission_amount = (order_price * commission_percent) / 100
        
        print(f"üí∞ [Commission] Taxipark: {taxipark.name}")
        print(f"üí∞ [Commission] Commission percent: {commission_percent}%")
        print(f"üí∞ [Commission] Commission amount: {commission_amount}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤–æ–¥–∏—Ç–µ–ª—è
        current_balance = driver.balance or 0.0
        print(f"üí∞ [Commission] Current balance: {current_balance}")
        
        if current_balance < commission_amount:
            return {
                "success": False,
                "error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: {commission_amount:.2f} —Å–æ–º, –¥–æ—Å—Ç—É–ø–Ω–æ: {current_balance:.2f} —Å–æ–º",
                "required_amount": commission_amount,
                "current_balance": current_balance,
                "commission_percent": commission_percent
            }
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é —Å –±–∞–ª–∞–Ω—Å–∞
        new_balance = current_balance - commission_amount
        driver.balance = new_balance
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = DriverTransaction(
            driver_id=driver.id,
            type='commission',
            amount=-commission_amount,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            description=f'–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ #{order.order_number} ({commission_percent}% –æ—Ç {order_price} —Å–æ–º)',
            status='completed',
            reference=f'COMM_{order.id}_{uuid.uuid4().hex[:8].upper()}',
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        db.add(transaction)
        
        print(f"üí∞ [Commission] Commission processed successfully:")
        print(f"üí∞ [Commission] - Commission amount: {commission_amount}")
        print(f"üí∞ [Commission] - Old balance: {current_balance}")
        print(f"üí∞ [Commission] - New balance: {new_balance}")
        print(f"üí∞ [Commission] - Transaction ID: {transaction.id}")
        
        return {
            "success": True,
            "commission_amount": commission_amount,
            "old_balance": current_balance,
            "new_balance": new_balance,
            "transaction_id": transaction.id
        }
        
    except Exception as e:
        print(f"‚ùå [Commission] Error processing commission: {e}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏: {str(e)}"
        }
