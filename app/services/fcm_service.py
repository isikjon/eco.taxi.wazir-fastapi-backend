import json
import os
from typing import Optional, Dict, Any
from app.core.config import settings

try:
    from firebase_admin import credentials, messaging, initialize_app
    FIREBASE_AVAILABLE = True
except ImportError:
    FIREBASE_AVAILABLE = False
    print("‚ö†Ô∏è Firebase Admin SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install firebase-admin")

class FCMService:
    def __init__(self):
        print("üîç [FCM] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FCM —Å–µ—Ä–≤–∏—Å–∞...")
        self.project_id = "eco-taxi-driver-b715f"
        self.sender_id = "1004431092746"
        self._initialize_firebase()
    
    def _initialize_firebase(self):
        print("üîç [FCM] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Firebase...")
        print(f"üîç [FCM] Firebase –¥–æ—Å—Ç—É–ø–µ–Ω: {FIREBASE_AVAILABLE}")
        
        if not FIREBASE_AVAILABLE:
            print("‚ùå [FCM] Firebase Admin SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        try:
            service_account_path = settings.FCM_SERVICE_ACCOUNT_PATH
            print(f"üîç [FCM] –ü—É—Ç—å –∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É: {service_account_path}")
            
            if not os.path.exists(service_account_path):
                print(f"‚ùå [FCM] –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {service_account_path}")
                return
            
            print("üîç [FCM] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...")
            cred = credentials.Certificate(service_account_path)
            print("üîç [FCM] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            initialize_app(cred)
            print("‚úÖ [FCM] Firebase Admin SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå [FCM] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase Admin SDK: {e}")
            import traceback
            print(f"‚ùå [FCM] Stack trace: {traceback.format_exc()}")
    
    def send_notification(
        self,
        fcm_token: str,
        title: str,
        body: str,
        data: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Firebase Admin SDK
        """
        print(f"üîç [FCM] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print(f"üîç [FCM] –¢–æ–∫–µ–Ω: {fcm_token[:20] if fcm_token else 'None'}...")
        print(f"üîç [FCM] –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        print(f"üîç [FCM] –¢–µ–∫—Å—Ç: {body}")
        print(f"üîç [FCM] –î–∞–Ω–Ω—ã–µ: {data}")
        
        if not FIREBASE_AVAILABLE:
            print("‚ùå [FCM] Firebase Admin SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        if not fcm_token:
            print("‚ùå [FCM] FCM —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False

        try:
            print(f"üîç [FCM] –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            message = messaging.Message(
                notification=messaging.Notification(
                    title=title,
                    body=body,
                ),
                data=data or {},
                token=fcm_token,
                android=messaging.AndroidConfig(
                    priority='high',
                    notification=messaging.AndroidNotification(
                        sound='default',
                        vibrate_timings_millis=[200, 100, 200],
                    ),
                ),
            )
            print(f"üîç [FCM] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

            print(f"üîç [FCM] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Firebase...")
            response = messaging.send(message)
            print(f"‚úÖ [FCM] FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title} (ID: {response})")
            return True

        except Exception as e:
            print(f"‚ùå [FCM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM: {e}")
            print(f"‚ùå [FCM] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            print(f"‚ùå [FCM] Stack trace: {traceback.format_exc()}")
            return False
    
    def send_photo_verification_approved(self, fcm_token: str, driver_name: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        print(f"üîç [FCM] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: {driver_name}")
        data = {
            'type': 'photo_verification_approved',
            'driver_name': driver_name
        }
        print(f"üîç [FCM] –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data}")
        return self.send_notification(
            fcm_token=fcm_token,
            title="–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–æ–±—Ä–µ–Ω—ã",
            body="–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ –ª–∏–Ω–∏—é!",
            data=data
        )
    
    def send_photo_verification_rejected(
        self,
        fcm_token: str,
        driver_name: str,
        rejection_reason: str
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        print(f"üîç [FCM] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: {driver_name}")
        print(f"üîç [FCM] –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {rejection_reason}")
        data = {
            'type': 'photo_verification_rejected',
            'driver_name': driver_name,
            'rejection_reason': rejection_reason
        }
        print(f"üîç [FCM] –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data}")
        return self.send_notification(
            fcm_token=fcm_token,
            title="–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
            body="–î–æ–∫—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏—á–∏–Ω",
            data=data
        )

    def send_balance_topup(
        self,
        fcm_token: str,
        driver_name: str,
        amount: float,
        new_balance: float
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        """
        print(f"üîç [FCM] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: {driver_name}")
        print(f"üîç [FCM] –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} —Å–æ–º")
        print(f"üîç [FCM] –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Å–æ–º")
        data = {
            'type': 'balance_topup',
            'driver_name': driver_name,
            'amount': str(amount),
            'new_balance': str(new_balance)
        }
        print(f"üîç [FCM] –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data}")
        return self.send_notification(
            fcm_token=fcm_token,
            title="–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω",
            body=f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Å–æ–º. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} —Å–æ–º",
            data=data
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
fcm_service = FCMService()
