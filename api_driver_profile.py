from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.database.session import get_db
from app.models.driver import Driver
from app.models.taxipark import TaxiPark
from app.models.order import Order
from app.models.photo_verification import PhotoVerification
from app.models.transaction import DriverTransaction
from typing import Optional
from datetime import datetime, timedelta
import os

router = APIRouter()

def normalize_phone_number(phone_number):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É +996XXXXXXXXXX –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î"""
    if not phone_number:
        return None
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–º–µ—Ä–∞
    digits_only = ''.join(filter(str.isdigit, phone_number))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞
    if len(digits_only) >= 10:
        if digits_only.startswith('996'):
            # –ù–æ–º–µ—Ä —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã 996 - –±–µ—Ä–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ 996
            main_digits = digits_only[3:]  # –ë–µ—Ä–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ 996
        else:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä, –µ—Å–ª–∏ –∏—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            main_digits = digits_only[-10:] if len(digits_only) >= 10 else digits_only[-9:]
    else:
        return None  # –ù–µ –º–æ–∂–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ë–î: +996XXXXXXXXXX
    return f"+996{main_digits}"

@router.get("/api/drivers/profile")
async def get_driver_profile(
    phoneNumber: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        print(f"üöó Getting driver profile: {phoneNumber}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ë–î
        normalized_phone = normalize_phone_number(phoneNumber)
        print(f"üöó Normalized phone: '{normalized_phone}'")
        
        if not normalized_phone:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        driver = db.query(Driver).filter(Driver.phone_number == normalized_phone).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ
        taxipark = db.query(TaxiPark).filter(TaxiPark.id == driver.taxipark_id).first()
        
        profile_data = {
            "id": driver.id,
            "first_name": driver.first_name,
            "last_name": driver.last_name,
            "phone_number": driver.phone_number,
            "car_model": driver.car_model,
            "car_number": driver.car_number,
            "car_color": driver.car_color,
            "car_year": driver.car_year,
            "car_vin": driver.car_vin,
            "car_body_number": driver.car_body_number,
            "car_sts": driver.car_sts,
            "call_sign": driver.call_sign,
            "balance": float(driver.balance) if driver.balance else 0.0,
            "tariff": driver.tariff,
            "is_active": driver.is_active,
            "taxipark": {
                "id": taxipark.id if taxipark else None,
                "name": taxipark.name if taxipark else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "commission": float(taxipark.commission_percent) if taxipark and taxipark.commission_percent else 0.0,
            } if taxipark else None,
            "created_at": driver.created_at.isoformat() if driver.created_at else None,
            "updated_at": driver.updated_at.isoformat() if driver.updated_at else None
        }
        
        print(f"üöó Profile data: {profile_data}")
        return profile_data
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üöó Error getting driver profile: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")

@router.get("/api/drivers/car")
async def get_driver_car(
    phoneNumber: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        print(f"üöó Getting car info: {phoneNumber}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ë–î
        normalized_phone = normalize_phone_number(phoneNumber)
        
        if not normalized_phone:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        driver = db.query(Driver).filter(Driver.phone_number == normalized_phone).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        car_data = {
            "id": driver.id,
            "car_model": driver.car_model,
            "car_number": driver.car_number,
            "car_color": driver.car_color,
            "car_year": driver.car_year,
            "car_vin": driver.car_vin,
            "car_body_number": driver.car_body_number,
            "car_sts": driver.car_sts,
            "is_primary": True  # –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –º–∞—à–∏–Ω–∞
        }
        
        print(f"üöó Car data: {car_data}")
        return car_data
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üöó Error getting car info: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ: {str(e)}")

@router.get("/api/drivers/taxipark")
async def get_driver_taxipark(
    phoneNumber: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        print(f"üè¢ Getting taxipark info: {phoneNumber}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ë–î
        normalized_phone = normalize_phone_number(phoneNumber)
        
        if not normalized_phone:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        driver = db.query(Driver).filter(Driver.phone_number == normalized_phone).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ
        taxipark = db.query(TaxiPark).filter(TaxiPark.id == driver.taxipark_id).first()
        
        if not taxipark:
            raise HTTPException(status_code=404, detail="–¢–∞–∫—Å–æ–ø–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        taxipark_data = {
            "id": taxipark.id,
            "name": taxipark.name,
            "commission": float(taxipark.commission_percent) if taxipark.commission_percent else 0.0,
            "phone": taxipark.phone or "+970667788778",
            "email": taxipark.email or "Example@gmail.com",
            "address": taxipark.address or "–ö—ã—Ä–≥—ã—Å—Ç–∞–Ω –≥. –û–∫ –º–∫—Ä –ê–Ω–∞—Ä 1, (–æ—Ä–µ–Ω—Ç–∏—Ä –ê–≤—Ç–æ–º–æ–π–∫–∞ –ù—É—Ä–∑–∞–º–∞–Ω, –∫–∞—Ñ–µ –ù–∏—Ä–≤–∞–Ω–∞)",
            "work_schedule": taxipark.working_hours or "–ü–Ω-–°–± 10:00-18:00\n–í—Å-–≤—ã—Ö–æ–¥–Ω–æ–π",
            "is_selected": True
        }
        
        print(f"üè¢ Taxipark data: {taxipark_data}")
        return taxipark_data
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üè¢ Error getting taxipark info: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ: {str(e)}")

@router.get("/api/drivers/weekly-results")
async def get_weekly_results(
    phoneNumber: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–µ–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        print(f"üìä Getting weekly results: {phoneNumber}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ë–î
        normalized_phone = normalize_phone_number(phoneNumber)
        
        if not normalized_phone:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        driver = db.query(Driver).filter(Driver.phone_number == normalized_phone).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        now = datetime.now()
        week_ago = now - timedelta(days=7)
        
        weekly_orders = db.query(Order).filter(
            Order.driver_id == driver.id,
            Order.created_at >= week_ago,
            Order.status == 'completed'
        ).count()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_orders = db.query(Order).filter(
            Order.driver_id == driver.id,
            Order.status == 'completed'
        ).count()
        
        results_data = {
            "driver_id": driver.id,
            "weekly_orders": weekly_orders,
            "total_orders": total_orders,
            "target_orders": 10,
            "has_achieved_goal": weekly_orders >= 10,
            "week_start": week_ago.isoformat(),
            "week_end": now.isoformat(),
            "reviews": [
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å, –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–π",
                "–ë—ã—Å—Ç—Ä–∞—è –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞",
                "–†–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è"
            ] if weekly_orders >= 10 else [],
            "observations": {
                "rating": 4.9,
                "average_wait_time": "3 –º–∏–Ω—É—Ç—ã",
                "completion_rate": "100%"
            } if weekly_orders >= 10 else {}
        }
        
        print(f"üìä Weekly results: {results_data}")
        return results_data
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üìä Error getting weekly results: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–¥–µ–ª–∏: {str(e)}")

@router.delete("/api/drivers/delete-account")
async def delete_driver_account(
    phoneNumber: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        print(f"üóëÔ∏è [DELETE] ===== –ù–ê–ß–ê–õ–û –£–î–ê–õ–ï–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê =====")
        print(f"üïê [DELETE] –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìû [DELETE] –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phoneNumber}")
        
        normalized_phone = normalize_phone_number(phoneNumber)
        print(f"üì± [DELETE] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {normalized_phone}")
        
        if not normalized_phone:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        driver = db.query(Driver).filter(Driver.phone_number == normalized_phone).first()
        
        if not driver:
            print(f"‚ùå [DELETE] –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        driver_id = driver.id
        driver_name = f"{driver.first_name} {driver.last_name}"
        taxipark_id = driver.taxipark_id
        
        print(f"‚úÖ [DELETE] –ù–∞–π–¥–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å: ID={driver_id}, –§–ò–û={driver_name}")
        print(f"üè¢ [DELETE] –¢–∞–∫—Å–æ–ø–∞—Ä–∫ ID: {taxipark_id}")
        
        photo_verifications = db.query(PhotoVerification).filter(PhotoVerification.driver_id == driver_id).all()
        print(f"üì∏ [DELETE] –ù–∞–π–¥–µ–Ω–æ {len(photo_verifications)} –∑–∞–ø–∏—Å–µ–π —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—è")
        
        for photo_verification in photo_verifications:
            if photo_verification.photos:
                photos = photo_verification.photos if isinstance(photo_verification.photos, list) else []
                for photo_path in photos:
                    try:
                        full_path = os.path.join("uploads", photo_path) if not photo_path.startswith("uploads") else photo_path
                        if os.path.exists(full_path):
                            os.remove(full_path)
                            print(f"üóëÔ∏è [DELETE] –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {full_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è [DELETE] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {photo_path}: {e}")
            
            db.delete(photo_verification)
        
        print(f"‚úÖ [DELETE] –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—è")
        
        transactions = db.query(DriverTransaction).filter(DriverTransaction.driver_id == driver_id).all()
        print(f"üí∞ [DELETE] –ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        for transaction in transactions:
            db.delete(transaction)
        
        print(f"‚úÖ [DELETE] –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        orders = db.query(Order).filter(Order.driver_id == driver_id).all()
        print(f"üöï [DELETE] –ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
        
        for order in orders:
            order.driver_id = None
            print(f"üîó [DELETE] –û—Ç–≤—è–∑–∞–Ω –∑–∞–∫–∞–∑ #{order.order_number}")
        
        print(f"‚úÖ [DELETE] –û—Ç–≤—è–∑–∞–Ω—ã –≤—Å–µ –∑–∞–∫–∞–∑—ã")
        
        db.delete(driver)
        db.commit()
        
        print(f"‚úÖ [DELETE] –í–æ–¥–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î")
        
        try:
            from app.services.taxipark_service import TaxiParkService
            TaxiParkService.update_drivers_count(db, taxipark_id)
            print(f"üìä [DELETE] –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è [DELETE] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞: {e}")
        
        print(f"üéâ [DELETE] ===== –£–î–ê–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û =====")
        print(f"üÜî [DELETE] ID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è: {driver_id}")
        print(f"üë§ [DELETE] –ò–º—è: {driver_name}")
        print(f"üì± [DELETE] –ù–æ–º–µ—Ä: {normalized_phone}")
        print(f"‚è∞ [DELETE] –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"=" * 80)
        
        return {
            "success": True,
            "message": "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω",
            "deleted_driver_id": driver_id,
            "deleted_data": {
                "photo_verifications": len(photo_verifications),
                "transactions": len(transactions),
                "orders_unlinked": len(orders)
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        print(f"‚ùå [DELETE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        print(f"‚ùå [DELETE] ===== –£–î–ê–õ–ï–ù–ò–ï –ù–ï–£–°–ü–ï–®–ù–û =====")
        print(f"=" * 80)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
