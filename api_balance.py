from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.database.session import get_db
from app.models.driver import Driver
from app.models.order import Order
from app.models.transaction import DriverTransaction
from typing import Optional, List
from datetime import datetime, timedelta
import json

router = APIRouter()

def normalize_phone_number(phone_number):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É +996XXXXXXXXX –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î"""
    if not phone_number:
        return None
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–º–µ—Ä–∞
    digits_only = ''.join(filter(str.isdigit, phone_number))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ 9 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞
    if len(digits_only) >= 9:
        if digits_only.startswith('996') and len(digits_only) >= 12:
            # –ù–æ–º–µ—Ä —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã 996
            main_digits = digits_only[3:12]  # –ë–µ—Ä–µ–º 9 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ 996
        else:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 9 —Ü–∏—Ñ—Ä
            main_digits = digits_only[-9:]
    else:
        return None  # –ù–µ –º–æ–∂–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ë–î: +996XXXXXXXXX
    return f"+996{main_digits}"

@router.get("/api/drivers/balance")
async def get_driver_balance(
    phoneNumber: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        print(f"üí∞ Getting balance for driver: {phoneNumber}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ë–î
        normalized_phone = normalize_phone_number(phoneNumber)
        print(f"üí∞ Normalized phone: '{normalized_phone}'")
        
        if not normalized_phone:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        driver = db.query(Driver).filter(Driver.phone_number == normalized_phone).first()
        
        if not driver:
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            all_drivers = db.query(Driver).all()
            print(f"üí∞ All drivers in DB:")
            for d in all_drivers:
                print(f"  - ID: {d.id}, Phone: '{d.phone_number}', Name: {d.first_name} {d.last_name}")
            raise HTTPException(status_code=404, detail=f"–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–∫–∞–ª–∏: '{normalized_phone}'")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü
        now = datetime.now()
        week_ago = now - timedelta(days=7)
        month_ago = now - timedelta(days=30)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –Ω–µ–¥–µ–ª—é
        weekly_orders = db.query(Order).filter(
            Order.driver_id == driver.id,
            Order.created_at >= week_ago,
            Order.status == 'completed'
        ).count()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –º–µ—Å—è—Ü
        monthly_orders = db.query(Order).filter(
            Order.driver_id == driver.id,
            Order.created_at >= month_ago,
            Order.status == 'completed'
        ).count()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        total_orders = db.query(Order).filter(
            Order.driver_id == driver.id,
            Order.status == 'completed'
        ).count()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        weekly_earnings = weekly_orders * 150  # –ü—Ä–∏–º–µ—Ä–Ω–æ 150 —Å–æ–º –∑–∞ –∑–∞–∫–∞–∑
        monthly_earnings = monthly_orders * 150
        
        balance_data = {
            "balance": float(driver.balance) if driver.balance else 0.0,
            "weekly_earnings": weekly_earnings,
            "monthly_earnings": monthly_earnings,
            "total_orders": total_orders,
            "last_updated": now.isoformat(),
            "driver_id": driver.id,
            "phone_number": driver.phone_number
        }
        
        print(f"üí∞ Balance data: {balance_data}")
        return balance_data
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üí∞ Error getting balance: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")

@router.get("/api/drivers/transactions")
async def get_driver_transactions(
    phoneNumber: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    filter: str = Query("all", description="–§–∏–ª—å—Ç—Ä: all, week, month"),
    page: int = Query(1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    limit: int = Query(20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        print(f"üìä Getting transactions for driver: {phoneNumber}, filter: {filter}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ë–î
        normalized_phone = normalize_phone_number(phoneNumber)
        print(f"üìä Normalized phone: '{normalized_phone}'")
        
        if not normalized_phone:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        driver = db.query(Driver).filter(Driver.phone_number == normalized_phone).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –¢–û–õ–¨–ö–û!)
        query = db.query(DriverTransaction).filter(DriverTransaction.driver_id == driver.id)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        now = datetime.now()
        if filter == "week":
            week_ago = now - timedelta(days=7)
            query = query.filter(DriverTransaction.created_at >= week_ago)
        elif filter == "month":
            month_ago = now - timedelta(days=30)
            query = query.filter(DriverTransaction.created_at >= month_ago)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_count = query.count()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        offset = (page - 1) * limit
        db_transactions = query.order_by(DriverTransaction.created_at.desc()).offset(offset).limit(limit).all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API
        transactions = []
        for trans in db_transactions:
            transaction = {
                "id": str(trans.id),
                "type": trans.type,
                "amount": float(trans.amount),
                "description": trans.description or "",
                "created_at": trans.created_at.isoformat() if trans.created_at else now.isoformat(),
                "status": trans.status or "completed",
                "reference": trans.reference or f"{trans.type.upper()}-{trans.id}"
            }
            transactions.append(transaction)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_pages = (total_count + limit - 1) // limit
        has_more = page < total_pages
        
        result = {
            "transactions": transactions,
            "total_count": total_count,
            "current_page": page,
            "total_pages": total_pages,
            "has_more": has_more,
            "filter": filter
        }
        
        print(f"üìä Transactions result: {len(transactions)} transactions found")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üìä Error getting transactions: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {str(e)}")

@router.get("/api/drivers/stats")
async def get_driver_stats(
    phoneNumber: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        print(f"üìà Getting stats for driver: {phoneNumber}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ë–î
        normalized_phone = normalize_phone_number(phoneNumber)
        print(f"üìà Normalized phone: '{normalized_phone}'")
        
        if not normalized_phone:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        driver = db.query(Driver).filter(Driver.phone_number == normalized_phone).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        now = datetime.now()
        week_ago = now - timedelta(days=7)
        month_ago = now - timedelta(days=30)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        total_orders = db.query(Order).filter(Order.driver_id == driver.id).count()
        completed_orders = db.query(Order).filter(
            Order.driver_id == driver.id,
            Order.status == 'completed'
        ).count()
        cancelled_orders = db.query(Order).filter(
            Order.driver_id == driver.id,
            Order.status == 'cancelled'
        ).count()
        
        # –ó–∞—Ä–∞–±–æ—Ç–∫–∏
        weekly_orders = db.query(Order).filter(
            Order.driver_id == driver.id,
            Order.created_at >= week_ago,
            Order.status == 'completed'
        ).count()
        
        monthly_orders = db.query(Order).filter(
            Order.driver_id == driver.id,
            Order.created_at >= month_ago,
            Order.status == 'completed'
        ).count()
        
        total_earnings = completed_orders * 150  # –ü—Ä–∏–º–µ—Ä–Ω–æ 150 —Å–æ–º –∑–∞ –∑–∞–∫–∞–∑
        weekly_earnings = weekly_orders * 150
        monthly_earnings = monthly_orders * 150
        average_order_value = 150.0  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        stats = {
            "total_earnings": total_earnings,
            "weekly_earnings": weekly_earnings,
            "monthly_earnings": monthly_earnings,
            "total_orders": total_orders,
            "completed_orders": completed_orders,
            "cancelled_orders": cancelled_orders,
            "average_order_value": average_order_value,
            "rating": 5.0,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            "total_rides": completed_orders,
            "driver_id": driver.id
        }
        
        print(f"üìà Stats data: {stats}")
        return stats
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üìà Error getting stats: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.post("/api/drivers/balance/topup")
async def request_balance_topup(
    request_data: dict,
    db: Session = Depends(get_db)
):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        phone_number = request_data.get("phoneNumber")
        amount = request_data.get("amount")
        
        if not phone_number or not amount:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        print(f"üí≥ Balance topup request: {phone_number}, amount: {amount}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ë–î
        normalized_phone = normalize_phone_number(phone_number)
        print(f"üí≥ Normalized phone: '{normalized_phone}'")
        
        if not normalized_phone:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        driver = db.query(Driver).filter(Driver.phone_number == normalized_phone).first()
        
        if not driver:
            raise HTTPException(status_code=404, detail="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        
        result = {
            "success": True,
            "message": "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏–Ω—è—Ç",
            "amount": amount,
            "driver_id": driver.id,
            "request_id": f"TOPUP-{driver.id}-{int(datetime.now().timestamp())}"
        }
        
        print(f"üí≥ Topup result: {result}")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üí≥ Error processing topup: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
